From 4ba2bbedb514e1c16a8d0f79bd44190bd308bb98 Mon Sep 17 00:00:00 2001
From: Brendan King <Brendan.King@imgtec.com>
Date: Tue, 15 Nov 2016 13:46:49 +0000
Subject: [PATCH 02/11] Allow selection of the primary bus/device driver

Allow the primary bus/device driver to be selected on the command
line, or in the server configuration files.

The primary bus/device driver can be selected using command line
option "-primaryBusDrv <driver>", or in the ServerFlags section
of the configuration files using:

	PrimaryBusDriver driver
---
 hw/xfree86/common/xf86Config.c      | 13 +++++++++++++
 hw/xfree86/common/xf86Globals.c     |  3 +++
 hw/xfree86/common/xf86Init.c        | 11 +++++++++++
 hw/xfree86/common/xf86Privstr.h     |  4 ++++
 hw/xfree86/common/xf86platformBus.c | 16 ++++++++++++++++
 5 files changed, 47 insertions(+)

diff --git a/hw/xfree86/common/xf86Config.c b/hw/xfree86/common/xf86Config.c
index e31030d63..ce04d81f0 100644
--- a/hw/xfree86/common/xf86Config.c
+++ b/hw/xfree86/common/xf86Config.c
@@ -646,5 +646,6 @@ typedef enum {
     FLAG_MAX_CLIENTS,
     FLAG_IGLX,
+    FLAG_PRIMARY_BUS_DRIVER,
 } FlagValues;
 
 /**
@@ -705,6 +706,8 @@ static OptionInfoRec FlagOptions[] = {
      {0}, FALSE},
     {FLAG_DEBUG, "Debug", OPTV_STRING,
      {0}, FALSE},
+    {FLAG_PRIMARY_BUS_DRIVER, "PrimaryBusDriver", OPTV_STRING,
+     {0}, FALSE},
     {-1, NULL, OPTV_NONE,
      {0}, FALSE},
 };
@@ -948,6 +951,16 @@ configServerFlags(XF86ConfFlagsPtr flagsconf, XF86OptionPtr layoutopts)
     }
     xf86Msg(from, "Max clients allowed: %i, resource mask: 0x%x\n",
 	    LimitClients, RESOURCE_ID_MASK);
+
+#ifdef XSERVER_PLATFORM_BUS
+    if (xf86Info.primaryBusDrvFrom != X_CMDLINE) {
+        xf86Info.primaryBusDrv = xf86GetOptValString(FlagOptions,
+                                                     FLAG_PRIMARY_BUS_DRIVER);
+
+        xf86Info.primaryBusDrvFrom = xf86Info.primaryBusDrv ? X_CONFIG :
+                                                              X_DEFAULT;
+    }
+#endif
 }
 
 Bool
diff --git a/hw/xfree86/common/xf86Globals.c b/hw/xfree86/common/xf86Globals.c
index 7cc7401a2..59547d59d 100644
--- a/hw/xfree86/common/xf86Globals.c
+++ b/hw/xfree86/common/xf86Globals.c
@@ -133,6 +133,9 @@ xf86InfoRec xf86Info = {
 #else
     .autoAddGPU = FALSE,
 #endif
+#ifdef XSERVER_PLATFORM_BUS
+    .primaryBusDrv = NULL,
+#endif
 };
 
 const char *xf86ConfigFile = NULL;
diff --git a/hw/xfree86/common/xf86Init.c b/hw/xfree86/common/xf86Init.c
index 2ec6b2f8b..b39e5956c 100644
--- a/hw/xfree86/common/xf86Init.c
+++ b/hw/xfree86/common/xf86Init.c
@@ -1282,6 +1282,14 @@ ddxProcessArgument(int argc, char **argv, int i)
         xf86Info.iglxFrom = X_CMDLINE;
         return 0;
     }
+#ifdef XSERVER_PLATFORM_BUS
+    if (!strcmp(argv[i], "-primaryBusDrv")) {
+        CHECK_FOR_REQUIRED_ARGUMENT();
+        xf86Info.primaryBusDrv = argv[++i];
+        xf86Info.primaryBusDrvFrom = X_CMDLINE;
+        return 2;
+    }
+#endif
 
     /* OS-specific processing */
     return xf86ProcessArgument(argc, argv, i);
@@ -1353,6 +1361,9 @@ ddxUseMsg(void)
     ErrorF
         ("-novtswitch            don't automatically switch VT at reset & exit\n");
     ErrorF("-sharevts              share VTs with another X server\n");
+#ifdef XSERVER_PLATFORM_BUS
+    ErrorF("-primaryBusDrv         specify the primary bus/device driver\n");
+#endif
     /* OS-specific usage */
     xf86UseMsg();
     ErrorF("\n");
diff --git a/hw/xfree86/common/xf86Privstr.h b/hw/xfree86/common/xf86Privstr.h
index 21c2e1fe4..8b4baf87e 100644
--- a/hw/xfree86/common/xf86Privstr.h
+++ b/hw/xfree86/common/xf86Privstr.h
@@ -98,5 +98,9 @@ typedef struct {
 
     Bool autoAddGPU;
+#ifdef XSERVER_PLATFORM_BUS
+    const char *primaryBusDrv;
+    MessageType primaryBusDrvFrom;
+#endif
 } xf86InfoRec, *xf86InfoPtr;
 
 /* ISC's cc can't handle ~ of UL constants, so explicitly type cast them. */
diff --git a/hw/xfree86/common/xf86platformBus.c b/hw/xfree86/common/xf86platformBus.c
index cef47da03..dbd846d94 100644
--- a/hw/xfree86/common/xf86platformBus.c
+++ b/hw/xfree86/common/xf86platformBus.c
@@ -734,6 +734,22 @@ void xf86platformVTProbe(void)
 
 void xf86platformPrimary(void)
 {
+    if (xf86Info.primaryBusDrv) {
+        int i;
+
+        for (i = 0; i < xf86_num_platform_devices; i++)
+            if (!strcmp(xf86_platform_devices[i].attribs->driver, xf86Info.primaryBusDrv)) {
+                primaryBus.id.plat = &xf86_platform_devices[i];
+                primaryBus.type = BUS_PLATFORM;
+
+                xf86Msg(X_INFO, "Primary bus/device is %s (driver \"%s\")\n", primaryBus.id.plat->attribs->syspath, primaryBus.id.plat->attribs->driver);
+
+		break;
+            }
+
+        if (i == xf86_num_platform_devices)
+            xf86Msg(X_WARNING, "Couldn't find a primary bus/device with driver \"%s\"\n", xf86Info.primaryBusDrv);
+    }
     /* use the first platform device as a fallback */
     if (primaryBus.type == BUS_NONE) {
         xf86Msg(X_INFO, "no primary bus or device found\n");
-- 
2.17.1

