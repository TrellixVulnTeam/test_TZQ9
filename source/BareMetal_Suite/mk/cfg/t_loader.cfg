
ARCH=armv7-r
CPU=cortex-r5
SOC=kunlun
TGT ?= safe

-include $(TOPDIR)/board/$(BOARD)/t_loader.cfg

ROM_BASE ?= 0x100000

APP=t_loader
NAME=$(TGT)_$(APP)

ifneq ($(D),)
NAME := $(NAME)_debug
ROM_SIZE ?= 0x1F800
else
ROM_SIZE ?= 0x15000
endif


ifneq ($(DIL2),)
ifneq ($(TGT), safe)
$(error "dil2 only for safety!")
endif
NAME := $(NAME)_dil2
endif


BINARY_NAME=$(NAME).elf

RAM_BASE=0x4B0000
RAM_SIZE=0x8000
NMEM_BASE=0xFFFF0000
RAM2_BASE=0x4CFF80
#for lpddr4

STACK_SZ ?= 0x5000

#for ddr4


ifeq ($(DDR_FW),ddr4)
STACK_SZ := 0xd000
endif

ROM_PART=1

LINKER_SCRTIP_IN := arch/$(ARCH)/lnk.in.iram.ld

BOOT_SECTOR_IDX ?= 0

ifeq ($(TGT),safe)
BOOT_SECTOR_IDX := 2
CFG_CFLAGS += -DBOOT_DEV=OSPI
else
CFG_CFLAGS += -DBOOT_DEV=MMC
endif

## for run in iram
MEMBASE=$(ROM_BASE)
MEMSIZE=0x40000

CFG_CFLAGS += -DMEMBASE=$(ROM_BASE)
CFG_CFLAGS += -DMEMSIZE=0x40000

CFG_CFLAGS += -DBOOT_SECTOR_IDX=$(BOOT_SECTOR_IDX)
CFG_CFLAGS += -DCFG_DRV_UART
CFG_CFLAGS += -DCFG_SOC_RAM_ECC -DCFG_ARCH_FPU
CFG_CFLAGS += -DCFG_ARCH_TCM
CFG_CFLAGS += -DCFG_ATB_INIT_MIN_STACK -DCFG_ATB_MIN_STACK_SZ=0x400
CFG_CFLAGS += -DMEMCPY_ASM_OPTIMIZED -DMEMCLR_ASM_OPTIMIZED
CFG_CFLAGS += -DCFG_ARCH_R7_MPU_BG_EN -DCFG_ARCH_LLPP_EN
CFG_CFLAGS += -DCFG_ARCH_DIS_BRANCH_PREDICT
CFG_CFLAGS += -DCFG_RAM_FUNC
CFG_CFLAGS += -DDIL2_MEMBASE=$(DIL2_MEMBASE)
CFG_CFLAGS += -DDIL2_MEMSIZE=$(DIL2_MEMSIZE)
CFG_CFLAGS += -DSAFETY_MEMBASE=$(SAFETY_MEMBASE)
CFG_CFLAGS += -DSAFETY_MEMSIZE=$(SAFETY_MEMSIZE)
CFG_CFLAGS += -DSYS_CFG_MEMBASE=$(SYS_CFG_MEMBASE)
CFG_CFLAGS += -DSYS_CFG_MEMSIZE=$(SYS_CFG_MEMSIZE)
ifneq ($(SAF_AP1_MEMBASE),)
CFG_CFLAGS += -DSAF_AP1_MEMBASE=$(SAF_AP1_MEMBASE)
endif
ifneq ($(SAF_AP2_MEMBASE),)
CFG_CFLAGS += -DSAF_AP2_MEMBASE=$(SAF_AP2_MEMBASE)
endif
#CFG_CFLAGS += -DTIME_STATISTICS=1

CFG_CFLAGS += -DIMG_BACKUP_LOW_BASE=$(IMG_BACKUP_LOW_BASE)
CFG_CFLAGS += -DIMG_BACKUP_LOW_SZ=$(IMG_BACKUP_LOW_SZ)
CFG_CFLAGS += -DVBMETA_MEMBASE=$(VBMETA_MEMBASE)
CFG_CFLAGS += -DVBMETA_MEMSIZE=$(VBMETA_MEMSIZE)

IP_MODULE_LIST += testbench pll clk mpu rstgen timer gpio
IP_MODULE_LIST += analog wdog scr funcsafe uart
IP_MODULE_LIST += ddr/dw_umctl2 i2c/dw_i2c/src io_expander mailbox fuse_ctrl
TIMER_SEL = sdrv_timer
WDOG_SEL = sdrv_wdt
GPIO_SEL = d_ip_gpio
UART_SEL = dwc_uart
CRYPTO_MODULE_LIST = rng #micro-ecc mbedtls
SERVICE_LIST=srv_timer srv_pin

CFG_CFLAGS += -DCFG_WDOG_SDRV_WDT -DCFG_SOC_SEM_OWNER
CFG_CFLAGS += -DCFG_RUN_DDR_INIT_SEQ
CFG_CFLAGS += -DCFG_DDR_FW_IN_FLASH -DCFG_DDR_SEQ_IN_FLASH
CFG_CFLAGS += -DDO_NOC_INIT

ifneq ($(IAR_DBG_ON),)
CFG_CFLAGS += -DIAR_DBG_ON
endif

ifneq ($(D),)
CFG_CFLAGS += -DDDR_DEBUG
endif

CFG_CFLAGS += -DINFO_LEVEL
CFG_CFLAGS += -DCFG_CPU_TYPE=CPU_TYPE_32

ifeq ($(VERIFIED_BOOT),true)
SUPPORT_HEAP := true
SUPPORT_CE_SDDRV := true
IP_MODULE_LIST += ce
CFG_CFLAGS += -DVERIFIED_BOOT=1 -DCFG_CRYPTO_HW_ENG -DCFG_CRYPTO_MODULE -DCFG_CRYPTO_PAD_DGST_2_ORDER

CINCLUDE += \
        -I$(TOPDIR)/lib/libavb/ \
        -I$(TOPDIR)/lib/verified_boot/include \
        -I$(TOPDIR)/lib/crypto
endif

ifeq ($(SUPPORT_HEAP),true)
CFG_CFLAGS += -DSUPPORT_HEAP
CINCLUDE += \
        -I$(TOPDIR)/lib/heap/include/ \
        -I$(TOPDIR)/lib/heap/miniheap/include/
endif
