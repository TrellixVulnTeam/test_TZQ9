/*!
 * The Clear BSD License
 * Copyright (c) 2016, Freescale Semiconductor, Inc.
 * Copyright 2016-2017 NXP
 * All rights reserved.
 *
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted (subject to the limitations in the disclaimer below) provided
 * that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of the copyright holder nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

program smac

type channels_t = uint8

enum smacErrors_t
{
  gErrorNoError_c = 0,
  gErrorBusy_c,
  gErrorChannelBusy_c,
  gErrorNoAck_c,
  gErrorOutOfRange_c,
  gErrorNoResourcesAvailable_c,
  gErrorNoValidCondition_c,
  gErrorCorrupted_c,
  gErrorMaxError_c
}

enum smacMessageDefs_t
{
  gMcpsDataCnf_c,
  gMcpsDataInd_c,
  gMlmeCcaCnf_c,
  gMlmeEdCnf_c,
  gMlmeSetReq_c,
  gMlmeSetCnf_c,
  gMlmeTimeoutInd_c,
  gMlme_UnexpectedRadioResetInd_c
}

enum rxStatus_t
{
  rxInitStatus,
  rxProcessingReceptionStatus_c,
  rxSuccessStatus_c,
  rxTimeOutStatus_c,
  rxAbortedStatus_c,
  rxMaxStatus_c
}

type smacTime_t = uint64

struct smacHeader_t
{
  uint16 frameControl;
  uint8 seqNo;
  uint16 panId;
  uint16 destAddr;
  uint16 srcAddr;
}

struct txPacket_t
{
  uint8 u8DataLength;
  smacHeader_t smacHeader;
  binary smacPdu @length(u8DataLength);
}

struct txContextConfig_t
{
  bool ccaBeforeTx;
  bool autoAck;
  uint8 retryCountCCAFail;
  uint8 retryCountAckFail;
}

struct rxPacket_t
{
  uint8 u8MaxDataLength;
  rxStatus_t rxStatus;
  uint8 u8DataLength;
  smacHeader_t smacHeader;
  binary smacPdu @length(u8DataLength);
}


interface SMAC {

    InitSmac() -> void

    MCPSDataRequest(txPacket_t txPacket) -> smacErrors_t

    MLMEConfigureTxContext(txContextConfig_t txConfig) -> smacErrors_t

    MLMERXEnableRequest(rxPacket_t rxPacket, smacTime_t stTimeout) -> smacErrors_t
    MLMERXDisableRequest() -> smacErrors_t

    MLMESetChannelRequest(channels_t newChannel) -> smacErrors_t
    MLMEGetChannelRequest() -> channels_t

    MLMEPAOutputAdjust(uint8 u8PaValue) -> smacErrors_t

    MLMELinkQuality() -> uint8
    MLMEScanRequest(channels_t u8ChannelToScan) -> smacErrors_t
    MLMECcaRequest() -> smacErrors_t

    MLMETXDisableRequest() -> void

    SMACSetShortSrcAddress(uint16 nwShortAddress) -> smacErrors_t
    SMACSetPanID(uint16 nwShortPanID) -> smacErrors_t

    SMAC_SetIVKey(uint8[16] KEY, uint8[16] IV) -> void

}

type instanceId_t = uint32

struct smacDataCnf_t
{
  smacErrors_t status;
}

struct smacDataInd_t
{
  uint8 u8LastRxRssi;
  rxPacket_t pRxPacket;
}

struct smacCcaCnf_t
{
  smacErrors_t status;
}

struct smacEdCnf_t
{
  smacErrors_t status;
  uint8 energyLevel;
  uint8 energyLeveldB;
  channels_t scannedChannel;
}

struct smacToAppMlmeMessage_t
{
  smacMessageDefs_t msgType;
  uint8 appInstanceId;
  union (msgType) {
    case gMlmeCcaCnf_c:
    smacCcaCnf_t ccaCnf;
    case gMlmeEdCnf_c:
    smacEdCnf_t edCnf;
  } msgData;
}

struct smacToAppDataMessage_t
{
  smacMessageDefs_t msgType;
  uint8 appInstanceId;
  union (msgType) {
    case gMcpsDataCnf_c:
    smacDataCnf_t dataCnf;
    case gMcpsDataInd_c:
    smacDataInd_t dataInd;
  } msgData;
}


interface SMACCallbacks {

    SMAC_APP_MCPS_SapHandler(smacToAppDataMessage_t msg, instanceId_t instanceId) -> smacErrors_t

    SMAC_APP_MLME_SapHandler(smacToAppMlmeMessage_t msg, instanceId_t instanceId) -> smacErrors_t

}

