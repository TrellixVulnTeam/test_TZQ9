diff --git a/drivers/tty/serial/8250/8250_core.c b/drivers/tty/serial/8250/8250_core.c
index cae61d1ebec5..f0c0f83e0098 100644
--- a/drivers/tty/serial/8250/8250_core.c
+++ b/drivers/tty/serial/8250/8250_core.c
@@ -967,6 +967,32 @@ static void serial_8250_overrun_backoff_work(struct work_struct *work)
 	spin_unlock_irqrestore(&port->lock, flags);
 }
 
+static void serial8250_rs485_ext_tx_off_work(struct work_struct *work)
+{
+	struct uart_8250_port *uart = container_of(work, struct uart_8250_port,
+						   tx_off_work.work);
+	unsigned long flags;
+
+	spin_lock_irqsave(&uart->tx_lock, flags);
+
+	if (uart->rs485_tx_en && uart->rs485_gpio_tx_en) {
+		uart->rs485_gpio_tx_en(uart, 0);
+		uart->rs485_tx_en = 0;
+	}
+
+	spin_unlock_irqrestore(&uart->tx_lock, flags);
+}
+
+static void serial8250_rs485_ext_ctrl_init(struct uart_8250_port *uart)
+{
+	if (uart == NULL)
+		return -EINVAL;
+
+	spin_lock_init(&uart->tx_lock);
+	uart->rs485_tx_en = 0;
+	INIT_DELAYED_WORK(&uart->tx_off_work, serial8250_rs485_ext_tx_off_work);
+}
+
 /**
  *	serial8250_register_8250_port - register a serial port
  *	@up: serial port template
@@ -1019,6 +1045,10 @@ int serial8250_register_8250_port(struct uart_8250_port *up)
 		uart->rs485_start_tx	= up->rs485_start_tx;
 		uart->rs485_stop_tx	= up->rs485_stop_tx;
 		uart->dma		= up->dma;
+		uart->rs485_gpio_tx_en	= up->rs485_gpio_tx_en;
+
+		if (uart->rs485_gpio_tx_en)
+			serial8250_rs485_ext_ctrl_init(uart);
 
 		/* Take tx_loadsz from fifosize if it wasn't set separately */
 		if (uart->port.fifosize && !uart->tx_loadsz)
diff --git a/drivers/tty/serial/8250/8250_dma.c b/drivers/tty/serial/8250/8250_dma.c
index 890fa7ddaa7f..389ab9757161 100644
--- a/drivers/tty/serial/8250/8250_dma.c
+++ b/drivers/tty/serial/8250/8250_dma.c
@@ -22,6 +22,10 @@ static void __dma_tx_complete(void *param)
 	dma_sync_single_for_cpu(dma->txchan->device->dev, dma->tx_addr,
 				UART_XMIT_SIZE, DMA_TO_DEVICE);
 
+	/* rs485 ext gpio ctrl off */
+	if(p->rs485_gpio_tx_en)
+	        schedule_delayed_work(&p->tx_off_work, usecs_to_jiffies(200));
+
 	spin_lock_irqsave(&p->port.lock, flags);
 
 	dma->tx_running = 0;
@@ -86,6 +90,16 @@ int serial8250_tx_dma(struct uart_8250_port *p)
 		goto err;
 	}
 
+	/* rs485 ext gpio ctrl on */
+	if(p->rs485_gpio_tx_en) {
+		spin_lock(&p->tx_lock);
+		if (p->rs485_tx_en == 0) {
+		        p->rs485_gpio_tx_en(p, 1);
+		        p->rs485_tx_en = 1;
+	        }
+	        spin_unlock(&p->tx_lock);
+	}
+
 	dma->tx_running = 1;
 	desc->callback = __dma_tx_complete;
 	desc->callback_param = p;
diff --git a/drivers/tty/serial/8250/8250_dw.c b/drivers/tty/serial/8250/8250_dw.c
index bbebb287751c..02946e052fad 100644
--- a/drivers/tty/serial/8250/8250_dw.c
+++ b/drivers/tty/serial/8250/8250_dw.c
@@ -26,6 +26,8 @@
 #include <linux/clk.h>
 #include <linux/reset.h>
 #include <linux/pm_runtime.h>
+#include <linux/gpio.h>
+#include <linux/of_gpio.h>
 
 #include <asm/byteorder.h>
 
@@ -45,6 +47,34 @@
 #define DW_RS485_EN_POLARITY_IS_HIGH		1
 #define DW_RS485_EN_POLARITY_IS_LOW		0
 
+/* RS485 ctrl type */
+#define RS485_CTRL_BY_SOC      1
+#define RS485_CTRL_BY_GPIO     2
+
+struct internal_485_ctrl {
+	unsigned int re_polarity:1;
+	unsigned int de_polarity:1;
+	unsigned int xfer_mode:2;
+	unsigned char de_assert_time;
+	unsigned char de_deassert_time;
+	unsigned short de2re_turn_around_time;
+	unsigned short re2de_turn_around_time;
+};
+
+struct external_485_ctrl {
+	unsigned int re_gpio;
+	unsigned int re_polarity;
+	unsigned int de_gpio;
+	unsigned int de_polarity;
+
+};
+
+union rs485_ctrl_config {
+	struct internal_485_ctrl  in;
+	struct external_485_ctrl  ext;
+};
+
+
 struct dw8250_data {
 	struct dw8250_port_data	data;
 
@@ -60,14 +90,9 @@ struct dw8250_data {
 	unsigned int		skip_autocfg:1;
 	unsigned int		uart_16550_compatible:1;
 
-	unsigned int		is_configed_as_rs485:1;
-	unsigned int		re_polarity:1;
-	unsigned int		de_polarity:1;
-	unsigned int		xfer_mode:2;
-	unsigned char		de_assert_time;
-	unsigned char		de_deassert_time;
-	unsigned short		de2re_turn_around_time;
-	unsigned short		re2de_turn_around_time;
+	int rs485_ctrl_type;
+	union rs485_ctrl_config  rs485_conf;
+
 };
 
 static inline struct dw8250_data *to_dw8250_data(struct dw8250_port_data *data)
@@ -452,7 +477,7 @@ static void dw8250_quirks(struct uart_port *p, struct dw8250_data *data)
 	}
 }
 
-static int dw8250_rs485_of_info_parse(struct device *dev, struct dw8250_data *data)
+static int dw8250_rs485_soc_of_info_parse(struct device *dev, struct dw8250_data *data)
 {
 	int err;
 	u32 val;
@@ -464,7 +489,7 @@ static int dw8250_rs485_of_info_parse(struct device *dev, struct dw8250_data *da
 			dev_err(dev, "%d is an invalid 485_re_polarity_val\n", val);
 			return -EINVAL;
 		}
-		data->re_polarity = val;
+		data->rs485_conf.in.re_polarity = val;
 	} else {
 		dev_err(dev, "get property snps,485_re_polarity_val failed\n");
 		return err;
@@ -477,7 +502,7 @@ static int dw8250_rs485_of_info_parse(struct device *dev, struct dw8250_data *da
 			dev_err(dev, "%d is an invalid 485_de_polarity_val\n", val);
 			return -EINVAL;
 		}
-		data->de_polarity = val;
+		data->rs485_conf.in.de_polarity = val;
 	} else {
 		dev_err(dev, "get property snps,485_de_polarity_val failed\n");
 		return err;
@@ -491,7 +516,7 @@ static int dw8250_rs485_of_info_parse(struct device *dev, struct dw8250_data *da
 			dev_err(dev, "%d is an invalid xfer_mode\n", val);
 			return -EINVAL;
 		}
-		data->xfer_mode = val;
+		data->rs485_conf.in.xfer_mode = val;
 	} else {
 		dev_err(dev, "get property snps,485_xfer_mode failed\n");
 		return err;
@@ -499,7 +524,7 @@ static int dw8250_rs485_of_info_parse(struct device *dev, struct dw8250_data *da
 
 	err = device_property_read_u32(dev, "snps,485_de_assert_time", &val);
 	if (!err)
-		data->de_assert_time = val;
+		data->rs485_conf.in.de_assert_time = val;
 	else {
 		dev_err(dev, "get property snps,485_de_assert_time failed\n");
 		return err;
@@ -507,7 +532,7 @@ static int dw8250_rs485_of_info_parse(struct device *dev, struct dw8250_data *da
 
 	err = device_property_read_u32(dev, "snps,485_de_deassert_time", &val);
 	if (!err)
-		data->de_deassert_time = val;
+		data->rs485_conf.in.de_deassert_time = val;
 	else {
 		dev_err(dev, "get property snps,485_de_deassert_time failed\n");
 		return err;
@@ -515,7 +540,7 @@ static int dw8250_rs485_of_info_parse(struct device *dev, struct dw8250_data *da
 
 	err = device_property_read_u32(dev, "snps,485_de2re_turn_around_time", &val);
 	if (!err)
-		data->de2re_turn_around_time = val;
+		data->rs485_conf.in.de2re_turn_around_time = val;
 	else {
 		dev_err(dev, "get property snps,485_de2re_turn_around_time failed\n");
 		return err;
@@ -523,7 +548,7 @@ static int dw8250_rs485_of_info_parse(struct device *dev, struct dw8250_data *da
 
 	err = device_property_read_u32(dev, "snps,485_re2de_turn_around_time", &val);
 	if (!err)
-		data->re2de_turn_around_time = val;
+		data->rs485_conf.in.re2de_turn_around_time = val;
 	else {
 		dev_err(dev, "get property snps,485_re2de_turn_around_time failed\n");
 		return err;
@@ -532,50 +557,52 @@ static int dw8250_rs485_of_info_parse(struct device *dev, struct dw8250_data *da
 	return 0;
 }
 
-static void dw8250_rs485_init(struct uart_8250_port *p, struct dw8250_data *data)
+static void dw8250_rs485_soc_init(struct uart_8250_port *p, struct dw8250_data *data)
 {
 	int value = 0;
+	int xfer_mode = 0;
 
 	value = serial_in(p, UART_TCR_DW);
 	value |= UART_TCR_DW_RS485_EN;
-	if (data->re_polarity)
+	if (data->rs485_conf.in.re_polarity)
 		value |= UART_TCR_DW_RE_POL;
 	else
 		value &= ~UART_TCR_DW_RE_POL;
-	if (data->de_polarity)
+	if (data->rs485_conf.in.de_polarity)
 		value |= UART_TCR_DW_DE_POL;
 	else
 		value &= ~UART_TCR_DW_DE_POL;
-	if (data->xfer_mode) {
+	if (data->rs485_conf.in.xfer_mode) {
 		value &= ~UART_TCR_DW_XFER_MODE;
-		value |= (data->xfer_mode << 3);
+		value |= (data->rs485_conf.in.xfer_mode << 3);
 	}
 	serial_out(p, UART_TCR_DW, value);
 
 	value = serial_in(p, UART_DET);
-	if (data->de_assert_time) {
+	if (data->rs485_conf.in.de_assert_time) {
 		value &= ~UART_DET_DE_ASSERTION_TIME;
-		value |= data->de_assert_time;
+		value |= data->rs485_conf.in.de_assert_time;
 	}
-	if (data->de_deassert_time) {
+	if (data->rs485_conf.in.de_deassert_time) {
 		value &= ~UART_DET_DE_DEASSERTION_TIME;
-		value |= (data->de_deassert_time << 16);
+		value |= (data->rs485_conf.in.de_deassert_time << 16);
 	}
 	serial_out(p, UART_DET, value);
 
 	value = serial_in(p, UART_TAT);
-	if (data->de2re_turn_around_time) {
+	if (data->rs485_conf.in.de2re_turn_around_time) {
 		value &= ~UART_TAT_DE_TO_RE;
-		value |= data->de2re_turn_around_time;
+		value |= data->rs485_conf.in.de2re_turn_around_time;
 	}
-	if (data->re2de_turn_around_time) {
+	if (data->rs485_conf.in.re2de_turn_around_time) {
 		value &= ~UART_TAT_RE_TO_DE;
-		value |= (data->re2de_turn_around_time << 16);
+		value |= (data->rs485_conf.in.re2de_turn_around_time << 16);
 	}
 	serial_out(p, UART_TAT, value);
 
 	/* initialize DE&RE ctl in according to the xfer mode */
-	if (data->xfer_mode == DW_RS485_FULL_DULPLEX_MODE) {
+	xfer_mode = data->rs485_conf.in.xfer_mode;
+	if (xfer_mode == DW_RS485_FULL_DULPLEX_MODE) {
 		value = serial_in(p, UART_RE_EN);
 		value |= UART_RE_EN_CTL;
 		serial_out(p, UART_RE_EN, value);
@@ -583,8 +610,8 @@ static void dw8250_rs485_init(struct uart_8250_port *p, struct dw8250_data *data
 		value = serial_in(p, UART_DE_EN);
 		value |= UART_DE_EN_CTL;
 		serial_out(p, UART_DE_EN, value);
-	} else if (data->xfer_mode == DW_RS485_SW_HALF_DULPLEX_MODE
-			|| data->xfer_mode == DW_RS485_HW_HALF_DULPLEX_MODE) {
+	} else if (xfer_mode == DW_RS485_SW_HALF_DULPLEX_MODE
+			|| xfer_mode == DW_RS485_HW_HALF_DULPLEX_MODE) {
 		value = serial_in(p, UART_RE_EN);
 		value |= UART_RE_EN_CTL;
 		serial_out(p, UART_RE_EN, value);
@@ -595,6 +622,139 @@ static void dw8250_rs485_init(struct uart_8250_port *p, struct dw8250_data *data
 	}
 }
 
+static int dw8250_rs485_gpio_of_info_parse(struct device *dev, struct dw8250_data *data)
+{
+	int err;
+	u32 val;
+	int gpio;
+
+	err = device_property_read_u32(dev, "sdrv,485_re_polarity_val", &val);
+	if (!err) {
+		if (val != DW_RS485_EN_POLARITY_IS_HIGH
+				&& val != DW_RS485_EN_POLARITY_IS_LOW) {
+			dev_err(dev, "%d is an invalid 485_re_polarity_val\n", val);
+			return -EINVAL;
+		}
+		data->rs485_conf.ext.re_polarity = val;
+	} else {
+		dev_err(dev, "get property sdrv,485_re_polarity_val failed\n");
+		return err;
+	}
+
+	err = device_property_read_u32(dev, "sdrv,485_de_polarity_val", &val);
+	if (!err) {
+		if (val != DW_RS485_EN_POLARITY_IS_HIGH
+				&& val != DW_RS485_EN_POLARITY_IS_LOW) {
+			dev_err(dev, "%d is an invalid 485_de_polarity_val\n", val);
+			return -EINVAL;
+		}
+		data->rs485_conf.ext.de_polarity = val;
+	} else {
+		dev_err(dev, "get property sdrv,485_de_polarity_val failed\n");
+		return err;
+	}
+
+	gpio = of_get_named_gpio(dev->of_node, "sdrv,485_re_gpio", 0);
+	if (gpio < 0) {
+		dev_err(dev, "get property sdrv,485_re_gpio failed\n");
+		return gpio;
+	}
+	data->rs485_conf.ext.re_gpio = gpio;
+
+	gpio = of_get_named_gpio(dev->of_node, "sdrv,485_de_gpio", 0);
+	if (gpio < 0) {
+		dev_err(dev, "get property sdrv,485_de_gpio failed\n");
+		return gpio;
+	}
+	data->rs485_conf.ext.de_gpio = gpio;
+
+	return 0;
+}
+
+static int dw8250_rs485_gpio_init(struct device *dev, struct dw8250_data *data)
+{
+	int ret;
+
+        /* case1: using same gpio */
+	if (data->rs485_conf.ext.de_gpio == data->rs485_conf.ext.re_gpio) {
+		ret = gpio_request(data->rs485_conf.ext.de_gpio, "rs485_re_de_ctrl");
+		if (ret <0) {
+			dev_err(dev, "request gpio %d failed\n",data->rs485_conf.ext.de_gpio);
+                        return ret;
+		}
+
+		if(data->rs485_conf.ext.re_polarity == data->rs485_conf.ext.de_polarity) {
+			dev_err(dev, "invalid re&de polarity,they must be different when using same gpio\n");
+			gpio_free(data->rs485_conf.ext.de_gpio);
+                        return ret;
+		}
+
+                /* re is enabled by default  */
+		if (data->rs485_conf.ext.re_polarity == DW_RS485_EN_POLARITY_IS_LOW)
+			gpio_direction_output(data->rs485_conf.ext.re_gpio, 0);
+		else
+			gpio_direction_output(data->rs485_conf.ext.re_gpio, 1);
+	} else { /* case2: using different gpio */
+		ret = gpio_request(data->rs485_conf.ext.re_gpio, "rs485_re_ctrl");
+		if (ret <0) {
+			dev_err(dev, "request gpio %d failed\n",data->rs485_conf.ext.re_gpio);
+                        return ret;
+		}
+
+		ret = gpio_request(data->rs485_conf.ext.de_gpio, "rs485_de_ctrl");
+		if (ret <0) {
+			dev_err(dev, "request gpio %d failed\n",data->rs485_conf.ext.de_gpio);
+                        return ret;
+		}
+
+                /* re is enabled by default  */
+		if (data->rs485_conf.ext.re_polarity == DW_RS485_EN_POLARITY_IS_LOW)
+			gpio_direction_output(data->rs485_conf.ext.re_gpio, 0);
+		else
+			gpio_direction_output(data->rs485_conf.ext.re_gpio, 1);
+
+		if (data->rs485_conf.ext.de_polarity == DW_RS485_EN_POLARITY_IS_LOW)
+			gpio_direction_output(data->rs485_conf.ext.de_gpio, 1);
+		else
+			gpio_direction_output(data->rs485_conf.ext.de_gpio, 0);
+	}
+
+	return 0;
+}
+
+static void dw8250_rs485_gpio_tx_en(struct uart_8250_port *uart, int enable_tx)
+{
+        struct uart_port *p = &uart->port;
+	struct dw8250_data *d = p->private_data;
+
+	if (enable_tx == 1) {
+		if (d->rs485_conf.ext.re_gpio != d->rs485_conf.ext.de_gpio) {
+			if (d->rs485_conf.ext.re_polarity == DW_RS485_EN_POLARITY_IS_LOW)
+				gpio_set_value(d->rs485_conf.ext.re_gpio, 1);
+			else
+				gpio_set_value(d->rs485_conf.ext.re_gpio, 0);
+		}
+
+		if (d->rs485_conf.ext.de_polarity == DW_RS485_EN_POLARITY_IS_LOW)
+			gpio_set_value(d->rs485_conf.ext.de_gpio, 0);
+		else
+			gpio_set_value(d->rs485_conf.ext.de_gpio, 1);
+	} else {
+		if (d->rs485_conf.ext.de_polarity == DW_RS485_EN_POLARITY_IS_LOW) {
+			gpio_set_value(d->rs485_conf.ext.de_gpio, 1);
+		}
+		else
+			gpio_set_value(d->rs485_conf.ext.de_gpio, 0);
+
+		if (d->rs485_conf.ext.re_gpio != d->rs485_conf.ext.de_gpio) {
+			if (d->rs485_conf.ext.re_polarity == DW_RS485_EN_POLARITY_IS_LOW)
+				gpio_set_value(d->rs485_conf.ext.re_gpio, 0);
+			else
+				gpio_set_value(d->rs485_conf.ext.re_gpio, 1);
+		}
+	}
+}
+
 static int dw8250_probe(struct platform_device *pdev)
 {
 	struct uart_8250_port uart = {}, *up = &uart;
@@ -605,6 +765,7 @@ static int dw8250_probe(struct platform_device *pdev)
 	int irq;
 	int err;
 	u32 val;
+	bool ctrl_type = 0;
 
 	if (!regs) {
 		dev_err(dev, "no registers defined\n");
@@ -644,8 +805,18 @@ static int dw8250_probe(struct platform_device *pdev)
 	data->uart_16550_compatible = device_property_read_bool(dev,
 						"snps,uart-16550-compatible");
 
-	data->is_configed_as_rs485 = device_property_read_bool(dev,
+	ctrl_type = device_property_read_bool(dev,
 			"snps,config-as-485-function");
+	if (ctrl_type)
+		data->rs485_ctrl_type = RS485_CTRL_BY_SOC;
+
+	ctrl_type = device_property_read_bool(dev,
+			"sdrv,config_gpio_ctrl_485");
+	if (ctrl_type && (data->rs485_ctrl_type != 0)) {
+		dev_err(dev, "rs485: only one mode can be config\n");
+		return -EINVAL;
+	} else if (ctrl_type)
+		data->rs485_ctrl_type = RS485_CTRL_BY_GPIO;
 
 	err = device_property_read_u32(dev, "reg-shift", &val);
 	if (!err)
@@ -744,9 +915,13 @@ static int dw8250_probe(struct platform_device *pdev)
 		up->dma = &data->data.dma;
 	}
 
-	if (data->is_configed_as_rs485) {
-		dw8250_rs485_of_info_parse(dev, data);
-		dw8250_rs485_init(&uart, data);
+	if (data->rs485_ctrl_type == RS485_CTRL_BY_SOC) {
+		dw8250_rs485_soc_of_info_parse(dev, data);
+		dw8250_rs485_soc_init(&uart, data);
+	} else if (data->rs485_ctrl_type == RS485_CTRL_BY_GPIO) {
+		dw8250_rs485_gpio_of_info_parse(dev, data);
+		dw8250_rs485_gpio_init(dev, data);
+		uart.rs485_gpio_tx_en = dw8250_rs485_gpio_tx_en;
 	}
 
 	data->data.line = serial8250_register_8250_port(up);
diff --git a/drivers/tty/serial/8250/8250_port.c b/drivers/tty/serial/8250/8250_port.c
index 3de0a16e055a..8a4207b48eeb 100644
--- a/drivers/tty/serial/8250/8250_port.c
+++ b/drivers/tty/serial/8250/8250_port.c
@@ -1933,9 +1933,20 @@ int serial8250_handle_irq(struct uart_port *port, unsigned int iir)
 	}
 	serial8250_modem_status(up);
 	if ((!up->dma || up->dma->tx_err) && (status & UART_LSR_THRE) &&
-		(up->ier & UART_IER_THRI))
+		(up->ier & UART_IER_THRI)) {
+		if(up->rs485_gpio_tx_en) {
+			spin_lock(&up->tx_lock);
+			if (up->rs485_tx_en == 0) {
+			        up->rs485_gpio_tx_en(up, 1);
+			        up->rs485_tx_en = 1;
+		        }
+		        spin_unlock(&up->tx_lock);
+		}
 		serial8250_tx_chars(up);
 
+		if(up->rs485_gpio_tx_en)
+		        schedule_delayed_work(&up->tx_off_work, usecs_to_jiffies(200));
+	}
 	uart_unlock_and_check_sysrq(port, flags);
 	return 1;
 }
diff --git a/include/linux/serial_8250.h b/include/linux/serial_8250.h
index 2b70f736b091..49fd5f1f8e23 100644
--- a/include/linux/serial_8250.h
+++ b/include/linux/serial_8250.h
@@ -132,6 +132,12 @@ struct uart_8250_port {
 	int			(*dl_read)(struct uart_8250_port *);
 	void			(*dl_write)(struct uart_8250_port *, int);
 
+    spinlock_t              tx_lock;
+    int                     rs485_tx_en;
+	struct delayed_work     tx_off_work;
+	void			(*rs485_gpio_rx_en)(struct uart_8250_port *, int);
+	void			(*rs485_gpio_tx_en)(struct uart_8250_port *, int);
+
 	struct uart_8250_em485 *em485;
 	void			(*rs485_start_tx)(struct uart_8250_port *);
 	void			(*rs485_stop_tx)(struct uart_8250_port *);
