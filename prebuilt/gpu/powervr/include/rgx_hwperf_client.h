/*************************************************************************/ /*!
@File
@Title          RGX HWPerf Client API
@Copyright      Copyright (c) Imagination Technologies Ltd. All Rights Reserved
@Description    RGX HWPerf Client events specific types
@License        Strictly Confidential.
*/ /**************************************************************************/

#ifndef RGX_HWPERF_CLIENT_H
#define RGX_HWPERF_CLIENT_H

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#include "imgpixfmts.h"
#include <powervr/pvrsrv_sync_ext.h>

/*!
 * API ID that the event is originating from.
 */
typedef enum
{
	RGX_HWPERF_CLIENT_API_INVALID = 0,

	RGX_HWPERF_CLIENT_API_SERVICES,
	RGX_HWPERF_CLIENT_API_EGL,
	RGX_HWPERF_CLIENT_API_OPENGLES,
	RGX_HWPERF_CLIENT_API_OPENCL,
	RGX_HWPERF_CLIENT_API_VULKAN,

	/* needs to be last */
	RGX_HWPERF_CLIENT_API_MAX
} RGX_HWPERF_CLIENT_API;

/* distance between different APIs is 32bits */
#define API_INTERVAL(_api) (((_api) - 1U) << 5U)
#define API_TYPE_START(_api) API_INTERVAL(RGX_HWPERF_CLIENT_API_##_api)

/** Prepares event type value so it can fit into header's TypeId field.
 *
 * @Input _api client API ID
 * @Input _event event type
 * @Return type value ready to encode in packet's header
 */
#define RGX_HWPERF_CLIENT_EVENT_TYPE2SHIFT(_api, _event) \
    ((_event) - API_INTERVAL(_api))

/** Retrieves event type from packet's TypeId field.
 *
 * @Input _api client API ID
 * @Input _event event type encoded in packet's header
 * @Return type of the event (RGX_HWPERF_CLIENT_EVENT_TYPE)
 */
#define RGX_HWPERF_CLIENT_EVENT_SHIFT2TYPE(_api, _event) \
    ((_event) + API_INTERVAL(_api))

/** Event's mask.
 *
 * @Input _api client API ID
 * @Input _event event type
 * @Return event's mask that can be matched against event's filter
 */
#define RGX_HWPERF_CLIENT_EVENT_MASK(_api, _event) \
    (1u << RGX_HWPERF_CLIENT_EVENT_TYPE2SHIFT(RGX_HWPERF_CLIENT_API_##_api,\
    (_event)))

/** Event's mask.
 *
 * @Input _api client API ID
 * @Input _event event type
 * @Return event's mask that can be matched against event's filter
 */
#define RGX_HWPERF_CLIENT_EVENT_MASK_NO_TOKEN(_api, _event) \
    (1u << RGX_HWPERF_CLIENT_EVENT_TYPE2SHIFT((_api), (_event)))

/*!
 * Type of the HWPerf UM event.
 *
 * Event groups (for different APIs) start in intervals of 32 e.g. Services
 * starts from 0, EGL starts from 32, OpenGLES starts from 64 etc.
 */
typedef enum
{
	RGX_HWPERF_CLIENT_EVENT_TYPE_INVALID = 0,

	/* start of services events */
	RGX_HWPERF_CLIENT_EVENT_TYPE_SERVICES = API_TYPE_START(SERVICES), // = 0
	RGX_HWPERF_CLIENT_EVENT_TYPE_SERVICES_KICK_START,
	RGX_HWPERF_CLIENT_EVENT_TYPE_SERVICES_KICK_END,
	RGX_HWPERF_CLIENT_EVENT_TYPE_SERVICES_ENQ,
	RGX_HWPERF_CLIENT_EVENT_TYPE_SERVICES_SYNC_ALLOC,
	RGX_HWPERF_CLIENT_EVENT_TYPE_SERVICES_SYNC_FREE,
	RGX_HWPERF_CLIENT_EVENT_TYPE_SERVICES_SYNC_FENCE_WAIT,
	RGX_HWPERF_CLIENT_EVENT_TYPE_SERVICES_SYNC_SW_TL_ADVANCE,
	RGX_HWPERF_CLIENT_EVENT_TYPE_SERVICES_SWTQ_START,
	RGX_HWPERF_CLIENT_EVENT_TYPE_SERVICES_SWTQ_END,
	RGX_HWPERF_CLIENT_EVENT_TYPE_SERVICES_LAST,

	/* start EGL events */
	RGX_HWPERF_CLIENT_EVENT_TYPE_EGL = API_TYPE_START(EGL), // = 32
	RGX_HWPERF_CLIENT_EVENT_TYPE_EGL_MARK_START,
	RGX_HWPERF_CLIENT_EVENT_TYPE_EGL_MARK_END,
	RGX_HWPERF_CLIENT_EVENT_TYPE_EGL_MEM_OP_START,
	RGX_HWPERF_CLIENT_EVENT_TYPE_EGL_MEM_OP_END,
	RGX_HWPERF_CLIENT_EVENT_TYPE_EGL_LAST,

	/* start of OpenGLES event */
	RGX_HWPERF_CLIENT_EVENT_TYPE_OPENGLES = API_TYPE_START(OPENGLES), // = 64
	RGX_HWPERF_CLIENT_EVENT_TYPE_OPENGLES_MARK_START,
	RGX_HWPERF_CLIENT_EVENT_TYPE_OPENGLES_MARK_END,
	RGX_HWPERF_CLIENT_EVENT_TYPE_OPENGLES_MARK_POINT,
	RGX_HWPERF_CLIENT_EVENT_TYPE_OPENGLES_KICK_START,
	RGX_HWPERF_CLIENT_EVENT_TYPE_OPENGLES_KICK_END,
	RGX_HWPERF_CLIENT_EVENT_TYPE_OPENGLES_DRAW_START,
	RGX_HWPERF_CLIENT_EVENT_TYPE_OPENGLES_DRAW_END,
	RGX_HWPERF_CLIENT_EVENT_TYPE_OPENGLES_SHADER_COMPILE_START,
	RGX_HWPERF_CLIENT_EVENT_TYPE_OPENGLES_SHADER_COMPILE_END,
	RGX_HWPERF_CLIENT_EVENT_TYPE_OPENGLES_MEM_OP_START,
	RGX_HWPERF_CLIENT_EVENT_TYPE_OPENGLES_MEM_OP_END,
	RGX_HWPERF_CLIENT_EVENT_TYPE_OPENGLES_DISPATCH_COMPUTE_START,
	RGX_HWPERF_CLIENT_EVENT_TYPE_OPENGLES_DISPATCH_COMPUTE_END,
	RGX_HWPERF_CLIENT_EVENT_TYPE_OPENGLES_TQ_KICK_START,
	RGX_HWPERF_CLIENT_EVENT_TYPE_OPENGLES_TQ_KICK_END,
	RGX_HWPERF_CLIENT_EVENT_TYPE_OPENGLES_LAST,

	/* start of OpenCL events */
	RGX_HWPERF_CLIENT_EVENT_TYPE_OPENCL = API_TYPE_START(OPENCL), // = 96
	RGX_HWPERF_CLIENT_EVENT_TYPE_OPENCL_MARK_START,
	RGX_HWPERF_CLIENT_EVENT_TYPE_OPENCL_MARK_END,
	RGX_HWPERF_CLIENT_EVENT_TYPE_OPENCL_LAST,

	/* start of Vulkan events */
	RGX_HWPERF_CLIENT_EVENT_TYPE_VULKAN = API_TYPE_START(VULKAN), // = 128
	RGX_HWPERF_CLIENT_EVENT_TYPE_VULKAN_MARK_START,
	RGX_HWPERF_CLIENT_EVENT_TYPE_VULKAN_MARK_END,
	RGX_HWPERF_CLIENT_EVENT_TYPE_VULKAN_MARK_POINT,
	RGX_HWPERF_CLIENT_EVENT_TYPE_VULKAN_MARK_SUB_COMMAND_START,
	RGX_HWPERF_CLIENT_EVENT_TYPE_VULKAN_MARK_SUB_COMMAND_END,
	RGX_HWPERF_CLIENT_EVENT_TYPE_VULKAN_LAST,

} RGX_HWPERF_CLIENT_EVENT_TYPE;

static_assert( \
    RGX_HWPERF_CLIENT_EVENT_TYPE_SERVICES_LAST <= \
        RGX_HWPERF_CLIENT_EVENT_TYPE_EGL && \
    RGX_HWPERF_CLIENT_EVENT_TYPE_EGL_LAST <= \
        RGX_HWPERF_CLIENT_EVENT_TYPE_OPENGLES && \
    RGX_HWPERF_CLIENT_EVENT_TYPE_OPENGLES_LAST <= \
        RGX_HWPERF_CLIENT_EVENT_TYPE_OPENCL && \
    RGX_HWPERF_CLIENT_EVENT_TYPE_OPENCL_LAST <= \
        RGX_HWPERF_CLIENT_EVENT_TYPE_VULKAN, \
    "Some of the values in RGX_HWPERF_CLIENT_EVENT_TYPE are overlapping.");

/* MARK_START, MARK_END and MARK_POINT events */

typedef enum
{
	/* OpenGLES */
	RGX_HWPERF_OGLES_MARK_ID_INVALID = 0,
	RGX_HWPERF_OGLES_MARK_ID_TAKICK,
	RGX_HWPERF_OGLES_MARK_ID_READPIXELS,
	RGX_HWPERF_OGLES_MARK_ID_WAITFORHWQ,
	RGX_HWPERF_OGLES_MARK_ID_BINDFB,
	RGX_HWPERF_OGLES_MARK_ID_DRAWARRAYS,
	RGX_HWPERF_OGLES_MARK_ID_DRAWARRAYSINSTANCED,
	RGX_HWPERF_OGLES_MARK_ID_DRAWARRAYSINDIRECT,
	RGX_HWPERF_OGLES_MARK_ID_DRAWELEMENTS,
	RGX_HWPERF_OGLES_MARK_ID_DRAWELEMENTSINSTANCED,
	RGX_HWPERF_OGLES_MARK_ID_DRAWELEMENTSINDIRECT,
	RGX_HWPERF_OGLES_MARK_ID_DRAWRANGEELEMENTS,
	RGX_HWPERF_OGLES_MARK_ID_DRAWELEMENTSBASEVERTEX,
	RGX_HWPERF_OGLES_MARK_ID_DRAWRANGEELEMENTSBASEVERTEX,
	RGX_HWPERF_OGLES_MARK_ID_DRAWELEMENTSINSTANCEDBASEVERTEX,
	RGX_HWPERF_OGLES_MARK_ID_MULTIDRAWELEMENTSBASEVERTEXEXT,
	RGX_HWPERF_OGLES_MARK_ID_TQKICK,
	RGX_HWPERF_OGLES_MARK_ID_COMPILESHADER,
	RGX_HWPERF_OGLES_MARK_ID_CDMKICK,
	RGX_HWPERF_OGLES_MARK_ID_MIPGEN,
	RGX_HWPERF_OGLES_MARK_ID_TEXIMAGE,
	RGX_HWPERF_OGLES_MARK_ID_TEXSUBIMAGE,
	RGX_HWPERF_OGLES_MARK_ID_COPYTEXIMAGE,
	RGX_HWPERF_OGLES_MARK_ID_COPYTEXSUBIMAGE,
	RGX_HWPERF_OGLES_MARK_ID_GHOSTTEXTURE,
	RGX_HWPERF_OGLES_MARK_ID_GLFINISH,
	RGX_HWPERF_OGLES_MARK_ID_GLFLUSH,
	RGX_HWPERF_OGLES_MARK_ID_COPYTEXTUREDATA,
	RGX_HWPERF_OGLES_MARK_ID_TEXTUREMAKERESIDENT,
	RGX_HWPERF_OGLES_MARK_ID_UNLOADINCONSISTENTTEXTURE,
	RGX_HWPERF_OGLES_MARK_ID_VALIDATESTATE,
	RGX_HWPERF_OGLES_MARK_ID_TEXSTORAGE,
	RGX_HWPERF_OGLES_MARK_ID_BUFFERDATA,
	RGX_HWPERF_OGLES_MARK_ID_BUFFERSUBDATA,
	RGX_HWPERF_OGLES_MARK_ID_COPYBUFFERSUBDATA,
	RGX_HWPERF_OGLES_MARK_ID_BINDTEXTURE,
	RGX_HWPERF_OGLES_MARK_ID_CLEAR,
	RGX_HWPERF_OGLES_MARK_ID_MEM_OP,
	RGX_HWPERF_OGLES_MARK_ID_DISPATCH_COMPUTE,
	RGX_HWPERF_OGLES_MARK_ID_DISPATCH_COMPUTE_INDIRECT,
	/* needs to be last */
	RGX_HWPERF_OGLES_MARK_ID_LAST,

	/* EGL */
	RGX_HWPERF_EGL_MARK_ID_INVALID,
	RGX_HWPERF_EGL_MARK_ID_SWAPBUFFERS,
	RGX_HWPERF_EGL_MARK_ID_CREATECONTEXT,
	RGX_HWPERF_EGL_MARK_ID_DESTROYCONTEXT,
	RGX_HWPERF_EGL_MARK_ID_MAKECURRENT,
	RGX_HWPERF_EGL_MARK_ID_MEM_OP,
	/* needs to be last */
	RGX_HWPERF_EGL_MARK_ID_LAST,

	/* OpenCL */
	RGX_HWPERF_OPENCL_MARK_ID_INVALID,
	/* Entry points */
	RGX_HWPERF_OPENCL_MARK_ID_clGetPlatformIDs,
	RGX_HWPERF_OPENCL_MARK_ID_clGetPlatformInfo,
	RGX_HWPERF_OPENCL_MARK_ID_clGetDeviceIDs,
	RGX_HWPERF_OPENCL_MARK_ID_clGetDeviceInfo,
	RGX_HWPERF_OPENCL_MARK_ID_clCreateContext,
	RGX_HWPERF_OPENCL_MARK_ID_clCreateContextFromType,
	RGX_HWPERF_OPENCL_MARK_ID_clRetainContext,
	RGX_HWPERF_OPENCL_MARK_ID_clReleaseContext,
	RGX_HWPERF_OPENCL_MARK_ID_clGetContextInfo,
	RGX_HWPERF_OPENCL_MARK_ID_clCreateCommandQueue,
	RGX_HWPERF_OPENCL_MARK_ID_clRetainCommandQueue,
	RGX_HWPERF_OPENCL_MARK_ID_clReleaseCommandQueue,
	RGX_HWPERF_OPENCL_MARK_ID_clGetCommandQueueInfo,
	RGX_HWPERF_OPENCL_MARK_ID_clSetCommandQueueProperty,
	RGX_HWPERF_OPENCL_MARK_ID_clCreateBuffer,
	RGX_HWPERF_OPENCL_MARK_ID_clCreateImage,
	RGX_HWPERF_OPENCL_MARK_ID_clCreateImage2D,
	RGX_HWPERF_OPENCL_MARK_ID_clCreateImage3D,
	RGX_HWPERF_OPENCL_MARK_ID_clRetainMemObject,
	RGX_HWPERF_OPENCL_MARK_ID_clReleaseMemObject,
	RGX_HWPERF_OPENCL_MARK_ID_clGetSupportedImageFormats,
	RGX_HWPERF_OPENCL_MARK_ID_clGetMemObjectInfo,
	RGX_HWPERF_OPENCL_MARK_ID_clGetImageInfo,
	RGX_HWPERF_OPENCL_MARK_ID_clCreateSampler,
	RGX_HWPERF_OPENCL_MARK_ID_clRetainSampler,
	RGX_HWPERF_OPENCL_MARK_ID_clReleaseSampler,
	RGX_HWPERF_OPENCL_MARK_ID_clGetSamplerInfo,
	RGX_HWPERF_OPENCL_MARK_ID_clCreateProgramWithSource,
	RGX_HWPERF_OPENCL_MARK_ID_clCreateProgramWithBinary,
	RGX_HWPERF_OPENCL_MARK_ID_clRetainProgram,
	RGX_HWPERF_OPENCL_MARK_ID_clReleaseProgram,
	RGX_HWPERF_OPENCL_MARK_ID_clBuildProgram,
	RGX_HWPERF_OPENCL_MARK_ID_clUnloadCompiler,
	RGX_HWPERF_OPENCL_MARK_ID_clGetProgramInfo,
	RGX_HWPERF_OPENCL_MARK_ID_clGetProgramBuildInfo,
	RGX_HWPERF_OPENCL_MARK_ID_clCreateKernel,
	RGX_HWPERF_OPENCL_MARK_ID_clCreateKernelsInProgram,
	RGX_HWPERF_OPENCL_MARK_ID_clRetainKernel,
	RGX_HWPERF_OPENCL_MARK_ID_clReleaseKernel,
	RGX_HWPERF_OPENCL_MARK_ID_clSetKernelArg,
	RGX_HWPERF_OPENCL_MARK_ID_clGetKernelInfo,
	RGX_HWPERF_OPENCL_MARK_ID_clGetKernelWorkGroupInfo,
	RGX_HWPERF_OPENCL_MARK_ID_clWaitForEvents,
	RGX_HWPERF_OPENCL_MARK_ID_clGetEventInfo,
	RGX_HWPERF_OPENCL_MARK_ID_clRetainEvent,
	RGX_HWPERF_OPENCL_MARK_ID_clReleaseEvent,
	RGX_HWPERF_OPENCL_MARK_ID_clGetEventProfilingInfo,
	RGX_HWPERF_OPENCL_MARK_ID_clFlush,
	RGX_HWPERF_OPENCL_MARK_ID_clFinish,
	RGX_HWPERF_OPENCL_MARK_ID_clEnqueueReadBuffer,
	RGX_HWPERF_OPENCL_MARK_ID_clEnqueueWriteBuffer,
	RGX_HWPERF_OPENCL_MARK_ID_clEnqueueCopyBuffer,
	RGX_HWPERF_OPENCL_MARK_ID_clEnqueueReadImage,
	RGX_HWPERF_OPENCL_MARK_ID_clEnqueueWriteImage,
	RGX_HWPERF_OPENCL_MARK_ID_clEnqueueCopyImage,
	RGX_HWPERF_OPENCL_MARK_ID_clEnqueueCopyImageToBuffer,
	RGX_HWPERF_OPENCL_MARK_ID_clEnqueueCopyBufferToImage,
	RGX_HWPERF_OPENCL_MARK_ID_clEnqueueMapBuffer,
	RGX_HWPERF_OPENCL_MARK_ID_clEnqueueMapImage,
	RGX_HWPERF_OPENCL_MARK_ID_clEnqueueFillImage,
	RGX_HWPERF_OPENCL_MARK_ID_clEnqueueUnmapMemObject,
	RGX_HWPERF_OPENCL_MARK_ID_clEnqueueNDRangeKernel,
	RGX_HWPERF_OPENCL_MARK_ID_clEnqueueTask,
	RGX_HWPERF_OPENCL_MARK_ID_clEnqueueNativeKernel,
	RGX_HWPERF_OPENCL_MARK_ID_clEnqueueMarker,
	RGX_HWPERF_OPENCL_MARK_ID_clEnqueueWaitForEvents,
	RGX_HWPERF_OPENCL_MARK_ID_clEnqueueBarrier,
	RGX_HWPERF_OPENCL_MARK_ID_clCreateSubBuffer,
	RGX_HWPERF_OPENCL_MARK_ID_clEnqueueReadBufferRect,
	RGX_HWPERF_OPENCL_MARK_ID_clEnqueueWriteBufferRect,
	RGX_HWPERF_OPENCL_MARK_ID_clEnqueueCopyBufferRect,
	RGX_HWPERF_OPENCL_MARK_ID_clSetUserEventStatus,
	RGX_HWPERF_OPENCL_MARK_ID_clEnqueueFillBuffer,
	RGX_HWPERF_OPENCL_MARK_ID_clEnqueueMigrateMemObjects,
	RGX_HWPERF_OPENCL_MARK_ID_clCreateSubDevices,
	RGX_HWPERF_OPENCL_MARK_ID_clRetainDevice,
	RGX_HWPERF_OPENCL_MARK_ID_clReleaseDevice,
	RGX_HWPERF_OPENCL_MARK_ID_clEnqueueMarkerWithWaitList,
	RGX_HWPERF_OPENCL_MARK_ID_clEnqueueBarrierWithWaitList,
	RGX_HWPERF_OPENCL_MARK_ID_clCreateProgramWithBuiltInKernels,
	RGX_HWPERF_OPENCL_MARK_ID_clCompileProgram,
	RGX_HWPERF_OPENCL_MARK_ID_clLinkProgram,
	RGX_HWPERF_OPENCL_MARK_ID_clUnloadPlatformCompiler,
	RGX_HWPERF_OPENCL_MARK_ID_clGetKernelArgInfo,
	RGX_HWPERF_OPENCL_MARK_ID_clCreateFromEGLImageKHR,
	RGX_HWPERF_OPENCL_MARK_ID_clEnqueueAcquireEGLObjectsKHR,
	RGX_HWPERF_OPENCL_MARK_ID_clEnqueueReleaseEGLObjectsKHR,
	RGX_HWPERF_OPENCL_MARK_ID_clCreateSamplerWithProperties,
	RGX_HWPERF_OPENCL_MARK_ID_clEnqueueAcquireGrallocObjectsIMG,
	RGX_HWPERF_OPENCL_MARK_ID_clEnqueueReleaseGrallocObjectsIMG,
	RGX_HWPERF_OPENCL_MARK_ID_clCreateCommandQueueWithProperties,
	RGX_HWPERF_OPENCL_MARK_ID_clCreatePipe,
	RGX_HWPERF_OPENCL_MARK_ID_clGetPipeInfo,
	RGX_HWPERF_OPENCL_MARK_ID_clEnqueueSVMFree,
	RGX_HWPERF_OPENCL_MARK_ID_clEnqueueSVMMap,
	RGX_HWPERF_OPENCL_MARK_ID_clEnqueueSVMUnmap,
	RGX_HWPERF_OPENCL_MARK_ID_clEnqueueSVMMemcpy,
	RGX_HWPERF_OPENCL_MARK_ID_clEnqueueSVMMemFill,
	RGX_HWPERF_OPENCL_MARK_ID_clSetKernelArgSVMPointer,
	RGX_HWPERF_OPENCL_MARK_ID_clEnqueueGenerateMipmapIMG,
	RGX_HWPERF_OPENCL_MARK_ID_clSetEventCallback,
	RGX_HWPERF_OPENCL_MARK_ID_clImportMemoryARM,

	/* Internal functions */
	RGX_HWPERF_OPENCL_MARK_ID_OCL_WaitForSyncObjectOrSyncPrim,
	RGX_HWPERF_OPENCL_MARK_ID_OCL_RecompileGetKernel,
	RGX_HWPERF_OPENCL_MARK_ID_OCL_RecompileGetCachedKernel,
	RGX_HWPERF_OPENCL_MARK_ID_OCL_FlushCommand,
	RGX_HWPERF_OPENCL_MARK_ID_RGXKickCDM,
	RGX_HWPERF_OPENCL_MARK_ID_EventUpdateRoutine,
	RGX_HWPERF_OPENCL_MARK_ID_GPUEventForwardRoutine,
	RGX_HWPERF_OPENCL_MARK_ID_OCL_SubmitComputeTask,
	/* needs to be last */
	RGX_HWPERF_OPENCL_MARK_ID_LAST,

	/* Vulkan */
	RGX_HWPERF_VULKAN_MARK_ID_INVALID,
	RGX_HWPERF_VULKAN_MARK_ID_WAIT_QUEUE_IDLE,
	RGX_HWPERF_VULKAN_MARK_ID_WAIT_FOR_FENCES,
	RGX_HWPERF_VULKAN_MARK_ID_SET_EVENT,
	RGX_HWPERF_VULKAN_MARK_ID_RESET_EVENT,
	RGX_HWPERF_VULKAN_MARK_ID_COMMANDBUFFER_RECORD_PRIMARY,
	RGX_HWPERF_VULKAN_MARK_ID_COMMANDBUFFER_RECORD_SECONDARY,
	RGX_HWPERF_VULKAN_MARK_ID_RENDERPASS_RECORD,
	RGX_HWPERF_VULKAN_MARK_ID_RECORD_DRAW_COMMAND,
	RGX_HWPERF_VULKAN_MARK_ID_EXECUTE_SECONDARY_COMMAND_BUFFER,
	RGX_HWPERF_VULKAN_MARK_ID_CREATE_GRAPHICS_PIPELINE,
	RGX_HWPERF_VULKAN_MARK_ID_CREATE_DEVICE,
	RGX_HWPERF_VULKAN_MARK_ID_COMPILE_SHADER,
	RGX_HWPERF_VULKAN_MARK_ID_QUEUE_SUBMIT,
	RGX_HWPERF_VULKAN_MARK_ID_SUBMIT_SUB_COMMAND,
	RGX_HWPERF_VULKAN_MARK_ID_CREATE_RENDERPASS,
	RGX_HWPERF_VULKAN_MARK_ID_DEBUG_MARK,
	RGX_HWPERF_VULKAN_MARK_ID_QUEUE_PRESENT,
	RGX_HWPERF_VULKAN_MARK_ID_CREATE_COMPUTE_PIPELINE,
	RGX_HWPERF_VULKAN_MARK_ID_CREATE_PIPELINE_LAYOUT,
	RGX_HWPERF_VULKAN_MARK_ID_CREATE_FRAMEBUFFER,
	RGX_HWPERF_VULKAN_MARK_ID_CREATE_IMAGE_VIEW,
	RGX_HWPERF_VULKAN_MARK_ID_CREATE_IMAGE,
	RGX_HWPERF_VULKAN_MARK_ID_CREATE_SAMPLER,
	RGX_HWPERF_VULKAN_MARK_ID_CREATE_DESCRIPTOR_SET_LAYOUT,
	RGX_HWPERF_VULKAN_MARK_ID_CREATE_DESCRIPTOR_SET,
	RGX_HWPERF_VULKAN_MARK_ID_UPDATE_DESCRIPTOR_SETS,
	RGX_HWPERF_VULKAN_MARK_ID_CREATE_SHADER_MODULE,
	RGX_HWPERF_VULKAN_MARK_ID_SHADER_CODE_PART,
	RGX_HWPERF_VULKAN_MARK_ID_CREATE_PRIMARY_COMMAND_BUFFER,
	RGX_HWPERF_VULKAN_MARK_ID_CREATE_SECONDARY_COMMAND_BUFFER,
	RGX_HWPERF_VULKAN_MARK_ID_CREATE_BUFFER,
	RGX_HWPERF_VULKAN_MARK_ID_SUBMIT_GRAPHICS_SUB_COMMAND,
	RGX_HWPERF_VULKAN_MARK_ID_SUBMIT_COMPUTE_SUB_COMMAND,
	RGX_HWPERF_VULKAN_MARK_ID_SUBMIT_TRANSFER_SUB_COMMAND,
	RGX_HWPERF_VULKAN_MARK_ID_SUBMIT_OCCLUSION_QUERY_SUB_COMMAND,
	RGX_HWPERF_VULKAN_MARK_ID_SUBMIT_EVENT_SUB_COMMAND,
	RGX_HWPERF_VULKAN_MARK_ID_SUBMIT_DEBUG_MARKER_SUB_COMMAND,
	RGX_HWPERF_VULKAN_MARK_ID_BIND_GRAPHICS_PIPELINE,
	RGX_HWPERF_VULKAN_MARK_ID_BIND_COMPUTE_PIPELINE,
	RGX_HWPERF_VULKAN_MARK_ID_BIND_GRAPHICS_DESCRIPTOR_SETS,
	RGX_HWPERF_VULKAN_MARK_ID_BIND_COMPUTE_DESCRIPTOR_SETS,
	RGX_HWPERF_VULKAN_MARK_ID_RECORD_DISPATCH_COMMAND,
	RGX_HWPERF_VULKAN_MARK_ID_RECORD_DISPATCH_INDIRECT_COMMAND,
	RGX_HWPERF_VULKAN_MARK_ID_RECORD_COPY_BUFFER_COMMAND,
	RGX_HWPERF_VULKAN_MARK_ID_RECORD_COPY_IMAGE_COMMAND,
	RGX_HWPERF_VULKAN_MARK_ID_RECORD_BLIT_IMAGE_COMMAND,
	RGX_HWPERF_VULKAN_MARK_ID_RECORD_COPY_BUFFER_TO_IMAGE_COMMAND,
	RGX_HWPERF_VULKAN_MARK_ID_RECORD_COPY_IMAGE_TO_BUFFER_COMMAND,
	RGX_HWPERF_VULKAN_MARK_ID_SET_OBJECT_NAME,
	/* needs to be last */
	RGX_HWPERF_VULKAN_MARK_ID_LAST,

	/* Last entry of the last group, used for total size */
	RGX_HWPERF_MARK_ID_LAST = RGX_HWPERF_VULKAN_MARK_ID_LAST,
	RGX_HWPERF_MARK_ID_FORCE_32BIT = 0x7FFFFFFFU
} RGX_HWPERF_MARK_ID;

typedef enum
{
	/* OpenGLES */
	RGX_HWPERF_OGLES_MEM_RESOURCE_TYPE_INVALID = 0,
	RGX_HWPERF_OGLES_MEM_RESOURCE_TYPE_BUFFER_OBJECT,
	RGX_HWPERF_OGLES_MEM_RESOURCE_TYPE_ARRAY_BUFFER_OBJECT,
	RGX_HWPERF_OGLES_MEM_RESOURCE_TYPE_ELEMENT_ARRAY_BUFFER_OBJECT,
	RGX_HWPERF_OGLES_MEM_RESOURCE_TYPE_UNIFORM_BUFFER_OBJECT,
	RGX_HWPERF_OGLES_MEM_RESOURCE_TYPE_PIXEL_PACK_BUFFER_OBJECT,
	RGX_HWPERF_OGLES_MEM_RESOURCE_TYPE_PIXEL_UNPACK_BUFFER_OBJECT,
	RGX_HWPERF_OGLES_MEM_RESOURCE_TYPE_COPY_READ_BUFFER_OBJECT,
	RGX_HWPERF_OGLES_MEM_RESOURCE_TYPE_COPY_WRITE_BUFFER_OBJECT,
	RGX_HWPERF_OGLES_MEM_RESOURCE_TYPE_SHADER_STORAGE_BUFFER_OBJECT,
	RGX_HWPERF_OGLES_MEM_RESOURCE_TYPE_DISPATCH_INDIRECT_BUFFER_OBJECT,
	RGX_HWPERF_OGLES_MEM_RESOURCE_TYPE_DRAW_INDIRECT_BUFFER_OBJECT,
	RGX_HWPERF_OGLES_MEM_RESOURCE_TYPE_TEXTURE_BUFFER_OBJECT,
	RGX_HWPERF_OGLES_MEM_RESOURCE_TYPE_ATOMIC_COUNTER_BUFFER_OBJECT,
	RGX_HWPERF_OGLES_MEM_RESOURCE_TYPE_TRANSFORM_FEEDBACK_BUFFER_OBJECT,
	RGX_HWPERF_OGLES_MEM_RESOURCE_TYPE_TEXTURE_IMAGE,
	RGX_HWPERF_OGLES_MEM_RESOURCE_TYPE_TEXTURE_2D,
	RGX_HWPERF_OGLES_MEM_RESOURCE_TYPE_TEXTURE_CEM,
	RGX_HWPERF_OGLES_MEM_RESOURCE_TYPE_TEXTURE_EXTERNAL,
	RGX_HWPERF_OGLES_MEM_RESOURCE_TYPE_TEXTURE_3D,
	RGX_HWPERF_OGLES_MEM_RESOURCE_TYPE_TEXTURE_2D_ARRAY,
	RGX_HWPERF_OGLES_MEM_RESOURCE_TYPE_TEXTURE_2D_MULTISAMPLE,
	RGX_HWPERF_OGLES_MEM_RESOURCE_TYPE_TEXTURE_2D_MULTISAMPLE_ARRAY,
	RGX_HWPERF_OGLES_MEM_RESOURCE_TYPE_BORDER_COLOUR_TABLE,
	RGX_HWPERF_OGLES_MEM_RESOURCE_TYPE_RENDER_SURFACE,
	RGX_HWPERF_OGLES_MEM_RESOURCE_TYPE_RENDER_BUFFER_STORAGE,
	RGX_HWPERF_OGLES_MEM_RESOURCE_TYPE_RENDER_BUFFER_STORAGE_MULTISAMPLE,
	RGX_HWPERF_OGLES_MEM_RESOURCE_TYPE_Z_STENCIL_BUFFER,
	RGX_HWPERF_OGLES_MEM_RESOURCE_TYPE_SHADER,
	RGX_HWPERF_OGLES_MEM_RESOURCE_TYPE_TILE_BUFFERS,
	RGX_HWPERF_OGLES_MEM_RESOURCE_TYPE_OCCLUSION_QUERY_VISIBILITY_BUFFER,
	RGX_HWPERF_OGLES_MEM_RESOURCE_TYPE_MULTIVIEW_DRAW_INDIRECT_BUFFER,
	RGX_HWPERF_OGLES_MEM_RESOURCE_TYPE_SAMPLER_OBJECT,
	RGX_HWPERF_OGLES_MEM_RESOURCE_TYPE_CIRCULAR_BUFFER,
	RGX_HWPERF_OGLES_MEM_RESOURCE_TYPE_INTERNAL_BUFFER,
	RGX_HWPERF_OGLES_MEM_RESOURCE_TYPE_CONTEXT_SHARED_ROBUSTNESS_BUFFER,
	RGX_HWPERF_OGLES_MEM_RESOURCE_TYPE_LAST,

	/* EGL */
	RGX_HWPERF_EGL_MEM_RESOURCE_TYPE_INVALID,
	RGX_HWPERF_EGL_MEM_RESOURCE_TYPE_PIXEL_BUFFER,
	RGX_HWPERF_EGL_MEM_RESOURCE_TYPE_YUV_COEFFICIENT,
	RGX_HWPERF_EGL_MEM_RESOURCE_TYPE_IMAGE,
	RGX_HWPERF_EGL_MEM_RESOURCE_TYPE_FBC_DESCRIPTOR,
	RGX_HWPERF_EGL_MEM_RESOURCE_TYPE_LAST,

	/* OpenCL */
	RGX_HWPERF_OPENCL_MEM_RESOURCE_TYPE_INVALID,
	RGX_HWPERF_OPENCL_MEM_RESOURCE_TYPE_LAST,

	/* Vulkan */
	RGX_HWPERF_VULKAN_MEM_RESOURCE_TYPE_INVALID,
	RGX_HWPERF_VULKAN_MEM_RESOURCE_TYPE_LAST,
} RGX_HWPERF_CLIENT_MEM_RESOURCE_TYPE;

typedef enum
{
	RGX_HWPERF_MEM_OP_TYPE_INVALID = 0,
	RGX_HWPERF_MEM_OP_TYPE_DEVICE_ALLOC,
	RGX_HWPERF_MEM_OP_TYPE_DEVICE_FREE,
	RGX_HWPERF_MEM_OP_TYPE_DEVICE_COPY,

	RGX_HWPERF_MEM_OP_TYPE_LAST,
} RGX_HWPERF_MEM_OP_TYPE;

#define HWPERF_CLIENT_MAX_MESSAGE_LEN 40
#define HWPERF_CLIENT_INVALID_JOBREF_VALUE 0

/******************************************************************************/
/* Services events                                                            */
/******************************************************************************/

/* KICK_START and KICK_END events */

typedef enum
{
	RGX_HWPERF_SERVICES_KICK_TYPE_INVALID = 0,
	RGX_HWPERF_SERVICES_KICK_TYPE_TA,
	RGX_HWPERF_SERVICES_KICK_TYPE_VRDM,
	RGX_HWPERF_SERVICES_KICK_TYPE_RS,
	RGX_HWPERF_SERVICES_KICK_TYPE_CDM,
	RGX_HWPERF_SERVICES_KICK_TYPE_SYNC,
	/* needs to be last */
	RGX_HWPERF_SERVICES_KICK_TYPE_LAST,
} RGX_HWPERF_SERVICES_KICK_TYPE;

typedef struct
{
	RGX_HWPERF_SERVICES_KICK_TYPE eType;
	IMG_UINT32                    ui32ExtJobRef;
	IMG_UINT64                    ui64RTDataSet;
} RGX_HWPERF_SERVICES_KICK_DATA;

typedef struct
{
	IMG_INT32                    i32EnqType;
	IMG_UINT32                   ui32Pid;
	IMG_UINT32                   ui32ExtJobRef;
	IMG_UINT64                   ui64WorkCtx;
	IMG_UINT32                   ui32WorkTarget;
	IMG_UINT32                   ui32ClientFlags;
} RGX_HWPERF_SERVICES_CLIENT_ENQ_DATA;

typedef enum
{
	RGX_HWPERF_SERVICES_CLIENT_INVALID_TL = 0,
	RGX_HWPERF_SERVICES_CLIENT_GPU_TL,
	RGX_HWPERF_SERVICES_CLIENT_SW_TL,

	/* needs to be last */
	RGX_HWPERF_SERVICES_CLIENT_TL_LAST,
} RGX_HWPERF_SERVICES_CLIENT_SYNC_TIMELINE_SUBTYPE;

typedef enum
{
	RGX_HWPERF_SERVICES_CLIENT_SYNC_RESOURCE_TYPE_INVALID = 0,
	RGX_HWPERF_SERVICES_CLIENT_SYNC_RESOURCE_TYPE_TIMELINE,
	RGX_HWPERF_SERVICES_CLIENT_SYNC_RESOURCE_TYPE_FENCE,
	RGX_HWPERF_SERVICES_CLIENT_SYNC_RESOURCE_TYPE_FENCE_DUP,
	RGX_HWPERF_SERVICES_CLIENT_SYNC_RESOURCE_TYPE_FENCE_MERGE,

	/* needs to be last */
	RGX_HWPERF_SERVICES_CLIENT_SYNC_RESOURCE_TYPE_LAST,
} RGX_HWPERF_SERVICES_CLIENT_SYNC_RESOURCE_TYPE;

typedef union
{
	struct
	{
		IMG_PID uiPID;
		PVRSRV_TIMELINE hTimeline;
		RGX_HWPERF_SERVICES_CLIENT_SYNC_TIMELINE_SUBTYPE eType;
		IMG_CHAR acTimelineName[PVRSRV_SYNC_NAME_LENGTH];
	} sTimeline;

	struct
	{
		IMG_PID uiPID;
		PVRSRV_FENCE hFence;
		PVRSRV_TIMELINE hSWTimeline;
		IMG_UINT64 ui64SyncPtIndex;
		IMG_CHAR acSWFenceName[PVRSRV_SYNC_NAME_LENGTH];
	} sSWFence;

	struct
	{
		IMG_PID uiPID;
		PVRSRV_FENCE hInFence;
		PVRSRV_FENCE hOutFence;
	} sFenceDup;

	struct
	{
		IMG_PID uiPID;
		PVRSRV_FENCE hInFence1;
		PVRSRV_FENCE hInFence2;
		PVRSRV_FENCE hOutFence;
		IMG_CHAR acFenceName[PVRSRV_SYNC_NAME_LENGTH];
	} sFenceMerge;

} RGX_HWPERF_SERVICES_CLIENT_SYNC_ALLOC_DETAIL;

typedef struct
{
	RGX_HWPERF_SERVICES_CLIENT_SYNC_RESOURCE_TYPE eType;
	RGX_HWPERF_SERVICES_CLIENT_SYNC_ALLOC_DETAIL uAllocDetail;
} RGX_HWPERF_SERVICES_CLIENT_SYNC_ALLOC_DATA;

typedef union
{
	struct
	{
		IMG_PID uiPID;
		PVRSRV_TIMELINE hTimeline;
	} sTimeline;

	struct
	{
		IMG_PID uiPID;
		PVRSRV_FENCE hFence;
	} sFence;
} RGX_HWPERF_SERVICES_CLIENT_SYNC_FREE_DETAIL;

typedef struct
{
	RGX_HWPERF_SERVICES_CLIENT_SYNC_RESOURCE_TYPE eType;
	RGX_HWPERF_SERVICES_CLIENT_SYNC_FREE_DETAIL uFreeDetail;
} RGX_HWPERF_SERVICES_CLIENT_SYNC_FREE_DATA;

typedef enum
{
	RGX_HWPERF_SERVICES_CLIENT_SYNC_FENCE_WAIT_TYPE_BEGIN = 0,
	RGX_HWPERF_SERVICES_CLIENT_SYNC_FENCE_WAIT_TYPE_END,

	RGX_HWPERF_SERVICES_CLIENT_SYNC_FENCE_WAIT_TYPE_LAST,
} RGX_HWPERF_SERVICES_CLIENT_SYNC_FENCE_WAIT_TYPE;

typedef enum
{
	RGX_HWPERF_SERVICES_CLIENT_SYNC_FENCE_WAIT_RESULT_INVALID = 0,
	RGX_HWPERF_SERVICES_CLIENT_SYNC_FENCE_WAIT_RESULT_TIMEOUT,
	RGX_HWPERF_SERVICES_CLIENT_SYNC_FENCE_WAIT_RESULT_PASSED,
	RGX_HWPERF_SERVICES_CLIENT_SYNC_FENCE_WAIT_RESULT_ERROR,

	RGX_HWPERF_SERVICES_CLIENT_SYNC_FENCE_WAIT_RESULT_LAST,
} RGX_HWPERF_SERVICES_CLIENT_SYNC_FENCE_WAIT_RESULT;

typedef union
{
	struct
	{
		IMG_UINT32 ui32TimeoutInMs;
	} sBegin;

	struct
	{
		RGX_HWPERF_SERVICES_CLIENT_SYNC_FENCE_WAIT_RESULT eResult;
	} sEnd;
} RGX_HWPERF_SERVICES_CLIENT_SYNC_FENCE_WAIT_DETAIL;

typedef struct
{
	RGX_HWPERF_SERVICES_CLIENT_SYNC_FENCE_WAIT_TYPE eType;
	IMG_PID uiPID;
	PVRSRV_FENCE hFence;
	RGX_HWPERF_SERVICES_CLIENT_SYNC_FENCE_WAIT_DETAIL uDetail;
} RGX_HWPERF_SERVICES_CLIENT_SYNC_FENCE_WAIT_DATA;

typedef struct
{
	IMG_PID uiPID;
	PVRSRV_TIMELINE hSWTimeline;
	IMG_UINT64 ui64SyncPtIndex;
} RGX_HWPERF_SERVICES_CLIENT_SYNC_SW_TL_ADVANCE_DATA;

typedef struct
{
	IMG_UINT32 ui32ExtJobRef;
} RGX_HWPERF_SERVICES_CLIENT_SWTQ_DATA;

/******************************************************************************/
/* EGL events                                                                 */
/******************************************************************************/

typedef struct
{
	RGX_HWPERF_MARK_ID eMarkId;
	IMG_UINT32 ui32JobRef;
	IMG_UINT32 ui32ContextID;
} RGX_HWPERF_EGL_MARK_DATA;

/******************************************************************************/
/* OpenGLES events                                                            */
/******************************************************************************/

typedef struct
{
	RGX_HWPERF_MARK_ID eMarkId;
	IMG_UINT32 ui32JobRef;
	IMG_UINT32 ui32GLESContextID;
	IMG_CHAR acInfo[HWPERF_CLIENT_MAX_MESSAGE_LEN];
} RGX_HWPERF_OGLES_MARK_DATA;

typedef enum RGX_HWPERF_OGLES_SURFACE_TYPE_TAG
{
	RGX_HWPERF_OGLES_SURFACE_COLOUR = 0x00,
	RGX_HWPERF_OGLES_SURFACE_DEPTH,
	RGX_HWPERF_OGLES_SURFACE_STENCIL,
	RGX_HWPERF_OGLES_SURFACE_DEPTHSTENCIL,
	RGX_HWPERF_OGLES_SURFACE_MSAASCRATCH,
	RGX_HWPERF_OGLES_SURFACE_ACCUM,
} RGX_HWPERF_OGLES_SURFACE_TYPE;

typedef enum RGX_HWPERF_OGLES_ZLS_COMPRESSION_TYPE_TAG
{
	RGX_HWPERF_OGLES_ZLS_COMPRESSION_NONE = 0,
	RGX_HWPERF_OGLES_ZLS_COMPRESSION_F32,
	RGX_HWPERF_OGLES_ZLS_COMPRESSION_I24,
	RGX_HWPERF_OGLES_ZLS_COMPRESSION_I16,
	RGX_HWPERF_OGLES_ZLS_COMPRESSION_F64
}RGX_HWPERF_OGLES_ZLS_COMPRESSION_TYPE;

#define HWPERF_OGLES_MAX_RTS_IDS 8 /* this is the maximum number of emits the PBE can do s*/

#define HWPERF_OGLES_SIZE_WIDTH_SHIFT                 0
#define HWPERF_OGLES_SIZE_WIDTH_MASK                  0x0000FFFF
#define HWPERF_OGLES_SIZE_HEIGHT_SHIFT                16
#define HWPERF_OGLES_SIZE_HEIGHT_MASK                 0xFFFF0000

#define HWPERF_OGLES_FLAGS_DEFAULTFB_SHIFT            0
#define HWPERF_OGLES_FLAGS_DEFAULTFB_MASK             0x00000001
#define HWPERF_OGLES_FLAGS_INVALIDATE_SHIFT           1
#define HWPERF_OGLES_FLAGS_INVALIDATE_MASK            0x00000002
#define HWPERF_OGLES_FLAGS_ZONLYRENDER_SHIFT          2
#define HWPERF_OGLES_FLAGS_ZONLYRENDER_MASK           0x00000004
#define HWPERF_OGLES_FLAGS_KICK3D_SHIFT               3
#define HWPERF_OGLES_FLAGS_KICK3D_MASK                0x00000008

#define HWPERF_OGLES_RTS_FLAGS_ENABLEDITHERING_SHIFT  0
#define HWPERF_OGLES_RTS_FLAGS_ENABLEDITHERING_MASK   0x00000001
#define HWPERF_OGLES_RTS_FLAGS_DOWNSCALE_SHIFT        1
#define HWPERF_OGLES_RTS_FLAGS_DOWNSCALE_MASK         0x00000002
/* 2-bit gap */
#define HWPERF_OGLES_RTS_FLAGS_MEMLAYOUT_SHIFT        4
#define HWPERF_OGLES_RTS_FLAGS_MEMLAYOUT_MASK         0x000000F0
#define HWPERF_OGLES_RTS_FLAGS_COMPRESSIONFMT_SHIFT   8
#define HWPERF_OGLES_RTS_FLAGS_COMPRESSIONFMT_MASK    0x00000F00
#define HWPERF_OGLES_RTS_FLAGS_SURFACE_TYPE_SHIFT     12
#define HWPERF_OGLES_RTS_FLAGS_SURFACE_TYPE_MASK      0x0000F000
#define HWPERF_OGLES_RTS_FLAGS_ROTATION_SHIFT         16
#define HWPERF_OGLES_RTS_FLAGS_ROTATION_MASK          0x000F0000

#define HWPERF_OGLES_ZLS_FLAGS_ZLOAD_SHIFT            0
#define HWPERF_OGLES_ZLS_FLAGS_ZLOAD_MASK             0x00000001
#define HWPERF_OGLES_ZLS_FLAGS_ZSTORE_SHIFT           1
#define HWPERF_OGLES_ZLS_FLAGS_ZSTORE_MASK            0x00000002
#define HWPERF_OGLES_ZLS_FLAGS_SLOAD_SHIFT            2
#define HWPERF_OGLES_ZLS_FLAGS_SLOAD_MASK             0x00000004
#define HWPERF_OGLES_ZLS_FLAGS_SSTORE_SHIFT           3
#define HWPERF_OGLES_ZLS_FLAGS_SSTORE_MASK            0x00000008
#define HWPERF_OGLES_ZLS_FLAGS_LOAD_COMPRESSED_SHIFT  4
#define HWPERF_OGLES_ZLS_FLAGS_LOAD_COMPRESSED_MASK   0x00000010
#define HWPERF_OGLES_ZLS_FLAGS_LOAD_FORMAT_SHIFT      5
#define HWPERF_OGLES_ZLS_FLAGS_LOAD_FORMAT_MASK       0x000000E0
#define HWPERF_OGLES_ZLS_FLAGS_STORE_COMPRESSED_SHIFT 8
#define HWPERF_OGLES_ZLS_FLAGS_STORE_COMPRESSED_MASK  0x00000100
#define HWPERF_OGLES_ZLS_FLAGS_STORE_FORMAT_SHIFT     9
#define HWPERF_OGLES_ZLS_FLAGS_STORE_FORMAT_MASK      0x00000E00


typedef struct
{
	RGX_HWPERF_MARK_ID eMarkId;
	IMG_UINT32 ui32JobRef;
	IMG_UINT32 ui32GLESContextID;

	IMG_UINT32 ui32SurfaceCount;           /* Render Target Surface (RTS) count */
	IMG_UINT32 bfFlags;                    /* Framebuffer Flags as a bit-field
	                                          0     0x0001 Default FrameBuffer
	                                          1     0x0002 Framebuffer Invalidated (Abort)
	                                          2     0x0004 Z-Only render
	                                          3     0x0008 3D is kicked (as well as TA)
	                                        */

	IMG_UINT32 bfZLSFlags;                /* ZLS Flags as a bit-field
	                                          0     0x0001 ZLoad
	                                          1     0x0002 ZStore
	                                          2     0x0004 SLoad
	                                          3     0x0008 SStore
	                                          4     0x0010 ZLS Load Compressed
	                                          5-7   0x00E0 ZLS Load Format (F32/24BitInt/16BitInt/F64)
	                                          8     0x0100 ZLS Store Compressed
	                                          9-11  0x0E00 ZLS Store Format (F32/24BitInt/16BitInt/F64)
	                                        */
	IMG_UINT64 ui64ZLSLoadAddress;
	IMG_UINT64 ui64ZLSStoreAddress;
	IMG_UINT32 ui32ZLSSize;                /* ZLS width/height bits 0-15=width 16-31=height */
	IMG_INT32 eKickReason;
	IMG_UINT32 ui32FramebufferName;			/* API ID of render target i.e. GLES3FrameBuffer::sNamedItem.ui32Name */
	union
	{
		/* Render Target Surfaces (RTS) */
		struct
		{
			IMG_UINT64 ui64RtsAddress;   /* RTS address */
			IMG_UINT32 ui32RtsSize;      /* RTS width/height bits 0-15=width 16-31=height */
			IMG_PIXFMT eIMGPixFormat;    /* RTS surface format */
			IMG_UINT32 bfRTSFlags;       /* RTS flag as a bit-field :
			                                0     0x00001 bEnableDithering,
			                                1     0x00002 bDownScale (Downscaled render e.g. MSAA resolve, YUV surface)
			                                4-7   0x000F0 eMemLayout IMG_MEMLAYOUT (twiddle/stride etc)
			                                8-11  0x00F00 eCompressionFormat IMG_FB_COMPRESSION
			                                12-15 0x0F000 SurfaceType (colour/depth/stencil)
			                                16-19 0xF0000 Rotation Angle IMG_ROTATION (4 bytes)
			                                */
			IMG_UINT32 ui32AlignmentPadding1; /* 8-bytes alignment requirement */
		} rts;
		/* other members of union TBD e.g. TQ, ReadPixels */
	} pkt[HWPERF_OGLES_MAX_RTS_IDS];

} RGX_HWPERF_OGLES_KICK_DATA;

typedef struct
{
	RGX_HWPERF_MARK_ID eMarkId;
	IMG_UINT32 ui32JobRef;
	IMG_UINT32 ui32GLESContextID;
} RGX_HWPERF_OGLES_KICK_DATA_END;

#define HWPERF_GLES3_PROGRAM_STAGE_NUMBER 6

/*
	acShaderSource is a variable length array
	use ui32ShaderDataSize to determine length.
*/
typedef struct
{
	RGX_HWPERF_MARK_ID eMarkId;
	IMG_UINT32 ui32ShaderType;
	IMG_UINT64 ui64ShaderID;
	IMG_UINT32 ui32GLESContextID;
	IMG_UINT32 ui32PartNumber;
	IMG_UINT32 ui32ShaderDataSize;
	IMG_CHAR acShaderSource[1]; // Variable length array
} RGX_HWPERF_OGLES_SHADER_DATA;

typedef struct
{
	RGX_HWPERF_MARK_ID eMarkId;
	IMG_UINT32 ui32GLESContextID;
	IMG_UINT32 ui32JobRef;
	IMG_UINT64 a_ui64ShaderID[HWPERF_GLES3_PROGRAM_STAGE_NUMBER];
	IMG_CHAR acInfo[HWPERF_CLIENT_MAX_MESSAGE_LEN];
} RGX_HWPERF_OGLES_DRAW_DATA;

typedef struct
{
	RGX_HWPERF_OGLES_MARK_DATA sBaseMarkData;
	IMG_UINT64 ui64ComputeShaderID;
	IMG_UINT32 aui32NumWorkGroups[3];
} RGX_HWPERF_OGLES_COMPUTE_DATA;

typedef struct
{
	IMG_CHAR acMarkMsg[HWPERF_CLIENT_MAX_MESSAGE_LEN];
	IMG_UINT32 ui32JobRef;
	IMG_UINT32 ui32GLESContextID;
} RGX_HWPERF_OGLES_POINT_DATA;

/******************************************************************************/
/* Vulkan events                                                              */
/******************************************************************************/
#define HWPERF_VULKAN_STENCIL_OP_COUNT 	2
#define HWPERF_VULKAN_STENCIL_OP_FRONT 	0
#define HWPERF_VULKAN_STENCIL_OP_BACK 	1

#define HWPERF_VULKAN_GP_FLAGS_RASTER_DISCARD 			(1 << 0)
#define HWPERF_VULKAN_GP_FLAGS_DEPTH_TEST_ENABLE 		(1 << 1)
#define HWPERF_VULKAN_GP_FLAGS_DEPTH_WRITE_ENABLE		(1 << 2)
#define HWPERF_VULKAN_GP_FLAGS_DEPTH_BOUNDS_ENABLE		(1 << 3)
#define HWPERF_VULKAN_GP_FLAGS_STENCIL_TEST_ENABLE		(1 << 4)
#define HWPERF_VULKAN_GP_FLAGS_BLEND_LOGIC_OP_ENABLE 	(1 << 5)

#define HWPERF_VULKAN_SAMPLER_FLAGS_ANISOTROPIC_ENABLE	(1 << 0)
#define HWPERF_VULKAN_SAMPLER_FLAGS_COMPARE_OP_ENABLE	(1 << 1)
#define HWPERF_VULKAN_SAMPLER_FLAGS_UNORM_COORD_ENABLE	(1 << 2)

typedef enum
{
	RGX_HWPERF_VULKAN_OBJECT_TYPE_INVALID = 0,
	RGX_HWPERF_VULKAN_OBJECT_TYPE_COMMAND_BUFFER,
	RGX_HWPERF_VULKAN_OBJECT_TYPE_COMMAND_POOL,
	RGX_HWPERF_VULKAN_OBJECT_TYPE_DEVICE,
	RGX_HWPERF_VULKAN_OBJECT_TYPE_QUEUE,
	RGX_HWPERF_VULKAN_OBJECT_TYPE_GRAPHICS_PIPELINE,
	RGX_HWPERF_VULKAN_OBJECT_TYPE_COMPUTE_PIPELINE,
	RGX_HWPERF_VULKAN_OBJECT_TYPE_SHADER_MODULE,
	RGX_HWPERF_VULKAN_OBJECT_TYPE_MEMORY_ALLOCATION,
	RGX_HWPERF_VULKAN_OBJECT_TYPE_DISPLAY_ALLOCATION,
	RGX_HWPERF_VULKAN_OBJECT_TYPE_IMAGE,
	RGX_HWPERF_VULKAN_OBJECT_TYPE_IMAGE_VIEW,
	RGX_HWPERF_VULKAN_OBJECT_TYPE_SAMPLER,
	RGX_HWPERF_VULKAN_OBJECT_TYPE_DESCRIPTOR_SET,
	RGX_HWPERF_VULKAN_OBJECT_TYPE_FENCE,
	RGX_HWPERF_VULKAN_OBJECT_TYPE_QUERY_POOL,
	RGX_HWPERF_VULKAN_OBJECT_TYPE_FRAMEBUFFER,
	RGX_HWPERF_VULKAN_OBJECT_TYPE_RENDER_PASS,
	RGX_HWPERF_VULKAN_OBJECT_TYPE_BUFFER,
	RGX_HWPERF_VULKAN_OBJECT_TYPE_BUFFER_VIEW,
	RGX_HWPERF_VULKAN_OBJECT_TYPE_DESCRIPTOR_POOL,
	RGX_HWPERF_VULKAN_OBJECT_TYPE_SET_LAYOUT,
	RGX_HWPERF_VULKAN_OBJECT_TYPE_PIPELINE_LAYOUT,
	RGX_HWPERF_VULKAN_OBJECT_TYPE_EVENT,
	RGX_HWPERF_VULKAN_OBJECT_TYPE_INSTANCE,
	RGX_HWPERF_VULKAN_OBJECT_TYPE_PIPELINE_CACHE,
	RGX_HWPERF_VULKAN_OBJECT_TYPE_SEMAPHORE,
	RGX_HWPERF_VULKAN_OBJECT_TYPE_SURFACE,
	RGX_HWPERF_VULKAN_OBJECT_TYPE_SWAPCHAIN,

	RGX_HWPERF_VULKAN_OBJECT_TYPE_LAST
} RGX_HWPERF_VULKAN_OBJECT_TYPE;

typedef enum
{
	RGX_HWPERF_VULKAN_STENCIL_OP_INVALID = 0,
	RGX_HWPERF_VULKAN_STENCIL_OP_KEEP,
	RGX_HWPERF_VULKAN_STENCIL_OP_ZERO,
	RGX_HWPERF_VULKAN_STENCIL_OP_REPLACE,
	RGX_HWPERF_VULKAN_STENCIL_OP_INCREMENT_AND_CLAMP,
	RGX_HWPERF_VULKAN_STENCIL_OP_DECREMENT_AND_CLAMP,
	RGX_HWPERF_VULKAN_STENCIL_OP_INVERT,
	RGX_HWPERF_VULKAN_STENCIL_OP_INCREMENT_AND_WRAP,
	RGX_HWPERF_VULKAN_STENCIL_OP_DECREMENT_AND_WRAP,

	RGX_HWPERF_VULKAN_STENCIL_OP_LAST
} RGX_HWPERF_VULKAN_STENCIL_OP;

typedef enum
{
	RGX_HWPERF_VULKAN_COMPARE_OP_INVALID = 0,
	RGX_HWPERF_VULKAN_COMPARE_OP_NEVER,
	RGX_HWPERF_VULKAN_COMPARE_OP_LESS,
	RGX_HWPERF_VULKAN_COMPARE_OP_EQUAL,
	RGX_HWPERF_VULKAN_COMPARE_OP_LESS_OR_EQUAL,
	RGX_HWPERF_VULKAN_COMPARE_OP_GREATER,
	RGX_HWPERF_VULKAN_COMPARE_OP_NOT_EQUAL,
	RGX_HWPERF_VULKAN_COMPARE_OP_GREATER_OR_EQUAL,
	RGX_HWPERF_VULKAN_COMPARE_OP_ALWAYS,

	RGX_HWPERF_VULKAN_COMPARE_OP_LAST
} RGX_HWPERF_VULKAN_COMPARE_OP;

typedef enum
{
	RGX_HWPERF_VULKAN_PRIMITIVE_TOPOLOGY_INVALID = 0,
	RGX_HWPERF_VULKAN_PRIMITIVE_TOPOLOGY_POINT_LIST,
	RGX_HWPERF_VULKAN_PRIMITIVE_TOPOLOGY_LINE_LIST,
	RGX_HWPERF_VULKAN_PRIMITIVE_TOPOLOGY_LINE_STRIP,
	RGX_HWPERF_VULKAN_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST,
	RGX_HWPERF_VULKAN_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP,
	RGX_HWPERF_VULKAN_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN,
	RGX_HWPERF_VULKAN_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY,
	RGX_HWPERF_VULKAN_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY,
	RGX_HWPERF_VULKAN_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY,
	RGX_HWPERF_VULKAN_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY,
	RGX_HWPERF_VULKAN_PRIMITIVE_TOPOLOGY_PATCH_LIST,

	RGX_HWPERF_VULKAN_PRIMITIVE_TOPOLOGY_LAST
} RGX_HWPERF_VULKAN_PRIMITIVE_TOPOLOGY;

typedef enum
{
	RGX_HWPERF_VULKAN_SAMPLE_COUNT_INVALID = 0,
	RGX_HWPERF_VULKAN_SAMPLE_COUNT_1,
	RGX_HWPERF_VULKAN_SAMPLE_COUNT_2,
	RGX_HWPERF_VULKAN_SAMPLE_COUNT_4,
	RGX_HWPERF_VULKAN_SAMPLE_COUNT_8,
	RGX_HWPERF_VULKAN_SAMPLE_COUNT_16,
	RGX_HWPERF_VULKAN_SAMPLE_COUNT_32,
	RGX_HWPERF_VULKAN_SAMPLE_COUNT_64,

	RGX_HWPERF_VULKAN_SAMPLE_COUNT_LAST
} RGX_HWPERF_VULKAN_SAMPLE_COUNT;

typedef enum
{
	RGX_HWPERF_VULKAN_CULL_MODE_INVALID = 0,
	RGX_HWPERF_VULKAN_CULL_MODE_NONE,
	RGX_HWPERF_VULKAN_CULL_MODE_FRONT,
	RGX_HWPERF_VULKAN_CULL_MODE_BACK,
	RGX_HWPERF_VULKAN_CULL_MODE_FRONT_AND_BACK,

	RGX_HWPERF_VULKAN_CULL_MODE_LAST
} RGX_HWPERF_VULKAN_CULL_MODE;

typedef enum
{
	RGX_HWPERF_VULKAN_FRONT_FACE_INVALID = 0,
	RGX_HWPERF_VULKAN_FRONT_FACE_COUNTER_CLOCKWISE,
	RGX_HWPERF_VULKAN_FRONT_FACE_CLOCKWISE,

	RGX_HWPERF_VULKAN_FRONT_FACE_LAST
} RGX_HWPERF_VULKAN_FRONT_FACE;

typedef enum
{
	RGX_HWPERF_VULKAN_LOGIC_OP_INVALID = 0,
	RGX_HWPERF_VULKAN_LOGIC_OP_CLEAR,
	RGX_HWPERF_VULKAN_LOGIC_OP_AND,
	RGX_HWPERF_VULKAN_LOGIC_OP_AND_REVERSE,
	RGX_HWPERF_VULKAN_LOGIC_OP_COPY,
	RGX_HWPERF_VULKAN_LOGIC_OP_AND_INVERTED,
	RGX_HWPERF_VULKAN_LOGIC_OP_NO_OP,
	RGX_HWPERF_VULKAN_LOGIC_OP_XOR,
	RGX_HWPERF_VULKAN_LOGIC_OP_OR,
	RGX_HWPERF_VULKAN_LOGIC_OP_NOR,
	RGX_HWPERF_VULKAN_LOGIC_OP_EQUIVALENT,
	RGX_HWPERF_VULKAN_LOGIC_OP_INVERT,
	RGX_HWPERF_VULKAN_LOGIC_OP_OR_REVERSE,
	RGX_HWPERF_VULKAN_LOGIC_OP_COPY_INVERTED,
	RGX_HWPERF_VULKAN_LOGIC_OP_OR_INVERTED,
	RGX_HWPERF_VULKAN_LOGIC_OP_NAND,
	RGX_HWPERF_VULKAN_LOGIC_OP_SET,

	RGX_HWPERF_VULKAN_LOGIC_OP_LAST
} RGX_HWPERF_VULKAN_LOGIC_OP;

typedef enum
{
	RGX_HWPERF_VULKAN_BLEND_FACTOR_INVALID = 0,
	RGX_HWPERF_VULKAN_BLEND_FACTOR_ZERO,
	RGX_HWPERF_VULKAN_BLEND_FACTOR_ONE,
	RGX_HWPERF_VULKAN_BLEND_FACTOR_SRC_COLOR,
	RGX_HWPERF_VULKAN_BLEND_FACTOR_ONE_MINUS_SRC_COLOR,
	RGX_HWPERF_VULKAN_BLEND_FACTOR_DST_COLOR,
	RGX_HWPERF_VULKAN_BLEND_FACTOR_ONE_MINUS_DST_COLOR,
	RGX_HWPERF_VULKAN_BLEND_FACTOR_SRC_ALPHA,
	RGX_HWPERF_VULKAN_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA,
	RGX_HWPERF_VULKAN_BLEND_FACTOR_DST_ALPHA,
	RGX_HWPERF_VULKAN_BLEND_FACTOR_ONE_MINUS_DST_ALPHA,
	RGX_HWPERF_VULKAN_BLEND_FACTOR_CONSTANT_COLOR,
	RGX_HWPERF_VULKAN_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR,
	RGX_HWPERF_VULKAN_BLEND_FACTOR_CONSTANT_ALPHA,
	RGX_HWPERF_VULKAN_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA,
	RGX_HWPERF_VULKAN_BLEND_FACTOR_SRC_ALPHA_SATURATE,
	RGX_HWPERF_VULKAN_BLEND_FACTOR_SRC1_COLOR,
	RGX_HWPERF_VULKAN_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR,
	RGX_HWPERF_VULKAN_BLEND_FACTOR_SRC1_ALPHA,
	RGX_HWPERF_VULKAN_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA,

	RGX_HWPERF_VULKAN_BLEND_FACTOR_LAST
} RGX_HWPERF_VULKAN_BLEND_FACTOR;

typedef enum
{
	RGX_HWPERF_VULKAN_BLEND_OP_INVALID = 0,
	RGX_HWPERF_VULKAN_BLEND_OP_ADD,
	RGX_HWPERF_VULKAN_BLEND_OP_SUBTRACT,
	RGX_HWPERF_VULKAN_BLEND_OP_REVERSE_SUBTRACT,
	RGX_HWPERF_VULKAN_BLEND_OP_MIN,
	RGX_HWPERF_VULKAN_BLEND_OP_MAX,
	RGX_HWPERF_VULKAN_BLEND_OP_ZERO_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_SRC_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_DST_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_SRC_OVER_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_DST_OVER_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_SRC_IN_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_DST_IN_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_SRC_OUT_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_DST_OUT_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_SRC_ATOP_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_DST_ATOP_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_XOR_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_MULTIPLY_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_SCREEN_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_OVERLAY_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_DARKEN_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_LIGHTEN_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_COLORDODGE_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_COLORBURN_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_HARDLIGHT_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_SOFTLIGHT_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_DIFFERENCE_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_EXCLUSION_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_INVERT_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_INVERT_RGB_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_LINEARDODGE_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_LINEARBURN_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_VIVIDLIGHT_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_LINEARLIGHT_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_PINLIGHT_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_HARDMIX_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_HSL_HUE_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_HSL_SATURATION_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_HSL_COLOR_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_HSL_LUMINOSITY_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_PLUS_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_PLUS_CLAMPED_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_PLUS_DARKER_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_MINUS_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_MINUS_CLAMPED_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_CONTRAST_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_INVERT_OVG_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_RED_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_GREEN_EXT,
	RGX_HWPERF_VULKAN_BLEND_OP_BLUE_EXT,

	RGX_HWPERF_VULKAN_BLEND_OP_LAST
} RGX_HWPERF_VULKAN_BLEND_OP;

typedef enum
{
	RGX_HWPERF_VULKAN_PIPELINE_BIND_POINT_INVALID = 0,
	RGX_HWPERF_VULKAN_PIPELINE_BIND_POINT_GRAPHICS,
	RGX_HWPERF_VULKAN_PIPELINE_BIND_POINT_COMPUTE,

	RGX_HWPERF_VULKAN_PIPELINE_BIND_POINT_LAST
} RGX_HWPERF_VULKAN_PIPELINE_BIND_POINT;

typedef enum
{
	RGX_HWPERF_VULKAN_ATTACHMENT_LOAD_OP_INVALID = 0,
	RGX_HWPERF_VULKAN_ATTACHMENT_LOAD_OP_LOAD,
	RGX_HWPERF_VULKAN_ATTACHMENT_LOAD_OP_CLEAR,
	RGX_HWPERF_VULKAN_ATTACHMENT_LOAD_OP_DONT_CARE,

	RGX_HWPERF_VULKAN_ATTACHMENT_LOAD_OP_LAST
} RGX_HWPERF_VULKAN_ATTACHMENT_LOAD_OP;

typedef enum
{
	RGX_HWPERF_VULKAN_ATTACHMENT_STORE_OP_INVALID = 0,
	RGX_HWPERF_VULKAN_ATTACHMENT_STORE_OP_STORE,
	RGX_HWPERF_VULKAN_ATTACHMENT_STORE_OP_DONT_CARE,

	RGX_HWPERF_VULKAN_ATTACHMENT_STORE_OP_LAST
} RGX_HWPERF_VULKAN_ATTACHMENT_STORE_OP;

typedef enum
{
	RGX_HWPERF_VULKAN_IMAGE_LAYOUT_INVALID = 0,
	RGX_HWPERF_VULKAN_IMAGE_LAYOUT_UNDEFINED,
	RGX_HWPERF_VULKAN_IMAGE_LAYOUT_GENERAL,
	RGX_HWPERF_VULKAN_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL,
	RGX_HWPERF_VULKAN_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL,
	RGX_HWPERF_VULKAN_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL,
	RGX_HWPERF_VULKAN_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL,
	RGX_HWPERF_VULKAN_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL,
	RGX_HWPERF_VULKAN_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL,
	RGX_HWPERF_VULKAN_IMAGE_LAYOUT_PREINITIALIZED,
	RGX_HWPERF_VULKAN_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL,
	RGX_HWPERF_VULKAN_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL,
	RGX_HWPERF_VULKAN_IMAGE_LAYOUT_PRESENT_SRC_KHR,
	RGX_HWPERF_VULKAN_IMAGE_LAYOUT_SHARED_PRESENT_KHR,
	RGX_HWPERF_VULKAN_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV,
	RGX_HWPERF_VULKAN_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT,

	RGX_HWPERF_VULKAN_IMAGE_LAYOUT_LAST
} RGX_HWPERF_VULKAN_IMAGE_LAYOUT;

typedef enum
{
	RGX_HWPERF_VULKAN_FBC_COMPRESSION_NONE = 0,
	RGX_HWPERF_VULKAN_FBC_COMPRESSION_DIRECT_8X8,
	RGX_HWPERF_VULKAN_FBC_COMPRESSION_DIRECT_16X4,
	RGX_HWPERF_VULKAN_FBC_COMPRESSION_DIRECT_32X2,
	RGX_HWPERF_VULKAN_FBC_COMPRESSION_DIRECT_LOSSY25_8X8,
	RGX_HWPERF_VULKAN_FBC_COMPRESSION_DIRECT_LOSSY25_16X4,
	RGX_HWPERF_VULKAN_FBC_COMPRESSION_DIRECT_LOSSY25_32X2,
	RGX_HWPERF_VULKAN_FBC_COMPRESSION_DIRECT_LOSSY75_8X8,
	RGX_HWPERF_VULKAN_FBC_COMPRESSION_DIRECT_LOSSY_8X8,
	RGX_HWPERF_VULKAN_FBC_COMPRESSION_DIRECT_LOSSY_16X4,
	RGX_HWPERF_VULKAN_FBC_COMPRESSION_DIRECT_LOSSY_32X2,
	RGX_HWPERF_VULKAN_FBC_COMPRESSION_DIRECT_LOSSY75_16X4,
	RGX_HWPERF_VULKAN_FBC_COMPRESSION_DIRECT_LOSSY75_32X2,
	RGX_HWPERF_VULKAN_FBC_COMPRESSION_UNKNOWN,
} RGX_HWPERF_VULKAN_FBC_COMPRESSION;

typedef enum
{
	RGX_HWPERF_VULKAN_ATTACHMENT_REF_TYPE_INVALID = 0,
	RGX_HWPERF_VULKAN_ATTACHMENT_REF_TYPE_COLOUR,
	RGX_HWPERF_VULKAN_ATTACHMENT_REF_TYPE_RESOLVE,
	RGX_HWPERF_VULKAN_ATTACHMENT_REF_TYPE_INPUT,
	RGX_HWPERF_VULKAN_ATTACHMENT_REF_TYPE_DEPTH_STENCIL,

	RGX_HWPERF_VULKAN_ATTACHMENT_REF_TYPE_LAST
} RGX_HWPERF_VULKAN_ATTACHMENT_REF_TYPE;

typedef enum
{
	RGX_HWPERF_VULKAN_PIPELINE_STAGE_INVALID								= 0,
	RGX_HWPERF_VULKAN_PIPELINE_STAGE_TOP_OF_PIPE_BIT 						= 0x00000001,
    RGX_HWPERF_VULKAN_PIPELINE_STAGE_DRAW_INDIRECT_BIT 						= 0x00000002,
    RGX_HWPERF_VULKAN_PIPELINE_STAGE_VERTEX_INPUT_BIT 						= 0x00000004,
    RGX_HWPERF_VULKAN_PIPELINE_STAGE_VERTEX_SHADER_BIT 						= 0x00000008,
    RGX_HWPERF_VULKAN_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT 		= 0x00000010,
    RGX_HWPERF_VULKAN_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT 	= 0x00000020,
    RGX_HWPERF_VULKAN_PIPELINE_STAGE_GEOMETRY_SHADER_BIT 					= 0x00000040,
    RGX_HWPERF_VULKAN_PIPELINE_STAGE_FRAGMENT_SHADER_BIT 					= 0x00000080,
    RGX_HWPERF_VULKAN_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT 				= 0x00000100,
    RGX_HWPERF_VULKAN_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT 				= 0x00000200,
    RGX_HWPERF_VULKAN_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT 			= 0x00000400,
    RGX_HWPERF_VULKAN_PIPELINE_STAGE_COMPUTE_SHADER_BIT 					= 0x00000800,
    RGX_HWPERF_VULKAN_PIPELINE_STAGE_TRANSFER_BIT 							= 0x00001000,
    RGX_HWPERF_VULKAN_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT 					= 0x00002000,
    RGX_HWPERF_VULKAN_PIPELINE_STAGE_HOST_BIT 								= 0x00004000,
    RGX_HWPERF_VULKAN_PIPELINE_STAGE_ALL_GRAPHICS_BIT 						= 0x00008000,
    RGX_HWPERF_VULKAN_PIPELINE_STAGE_ALL_COMMANDS_BIT 						= 0x00010000,
    RGX_HWPERF_VULKAN_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT 			= 0x01000000,
    RGX_HWPERF_VULKAN_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT 			= 0x00040000,
    RGX_HWPERF_VULKAN_PIPELINE_STAGE_COMMAND_PROCESS_BIT_NVX 				= 0x00020000,
    RGX_HWPERF_VULKAN_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV 				= 0x00400000,
    RGX_HWPERF_VULKAN_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV 				= 0x00200000,
    RGX_HWPERF_VULKAN_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV 	= 0x02000000,
    RGX_HWPERF_VULKAN_PIPELINE_STAGE_TASK_SHADER_BIT_NV 					= 0x00080000,
    RGX_HWPERF_VULKAN_PIPELINE_STAGE_MESH_SHADER_BIT_NV 					= 0x00100000,
    RGX_HWPERF_VULKAN_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT 		= 0x00800000,
} RGX_HWPERF_VULKAN_PIPELINE_STAGE;

typedef enum
{
	RGX_HWPERF_VULKAN_ACCESS_INVALID 									= 0,
    RGX_HWPERF_VULKAN_ACCESS_INDIRECT_COMMAND_READ_BIT 					= 0x00000001,
    RGX_HWPERF_VULKAN_ACCESS_INDEX_READ_BIT 							= 0x00000002,
    RGX_HWPERF_VULKAN_ACCESS_VERTEX_ATTRIBUTE_READ_BIT 					= 0x00000004,
    RGX_HWPERF_VULKAN_ACCESS_UNIFORM_READ_BIT 							= 0x00000008,
    RGX_HWPERF_VULKAN_ACCESS_INPUT_ATTACHMENT_READ_BIT 					= 0x00000010,
    RGX_HWPERF_VULKAN_ACCESS_SHADER_READ_BIT 							= 0x00000020,
    RGX_HWPERF_VULKAN_ACCESS_SHADER_WRITE_BIT 							= 0x00000040,
    RGX_HWPERF_VULKAN_ACCESS_COLOR_ATTACHMENT_READ_BIT 					= 0x00000080,
    RGX_HWPERF_VULKAN_ACCESS_COLOR_ATTACHMENT_WRITE_BIT 				= 0x00000100,
    RGX_HWPERF_VULKAN_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT 			= 0x00000200,
    RGX_HWPERF_VULKAN_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT 		= 0x00000400,
    RGX_HWPERF_VULKAN_ACCESS_TRANSFER_READ_BIT 							= 0x00000800,
    RGX_HWPERF_VULKAN_ACCESS_TRANSFER_WRITE_BIT 						= 0x00001000,
    RGX_HWPERF_VULKAN_ACCESS_HOST_READ_BIT 								= 0x00002000,
    RGX_HWPERF_VULKAN_ACCESS_HOST_WRITE_BIT 							= 0x00004000,
    RGX_HWPERF_VULKAN_ACCESS_MEMORY_READ_BIT 							= 0x00008000,
    RGX_HWPERF_VULKAN_ACCESS_MEMORY_WRITE_BIT 							= 0x00010000,
    RGX_HWPERF_VULKAN_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT 			= 0x02000000,
    RGX_HWPERF_VULKAN_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT 	= 0x04000000,
    RGX_HWPERF_VULKAN_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT 	= 0x08000000,
    RGX_HWPERF_VULKAN_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT 		= 0x00100000,
    RGX_HWPERF_VULKAN_ACCESS_COMMAND_PROCESS_READ_BIT_NVX 				= 0x00020000,
    RGX_HWPERF_VULKAN_ACCESS_COMMAND_PROCESS_WRITE_BIT_NVX 				= 0x00040000,
    RGX_HWPERF_VULKAN_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT 	= 0x00080000,
    RGX_HWPERF_VULKAN_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV 			= 0x00800000,
    RGX_HWPERF_VULKAN_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV 		= 0x00200000,
    RGX_HWPERF_VULKAN_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV 		= 0x00400000,
    RGX_HWPERF_VULKAN_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT 			= 0x01000000,
} RGX_HWPERF_VULKAN_ACCESS;

typedef enum
{
	RGX_HWPERF_VULKAN_IMAGE_VIEW_TYPE_INVALID = 0,
	RGX_HWPERF_VULKAN_IMAGE_VIEW_TYPE_1D,
    RGX_HWPERF_VULKAN_IMAGE_VIEW_TYPE_2D,
    RGX_HWPERF_VULKAN_IMAGE_VIEW_TYPE_3D,
    RGX_HWPERF_VULKAN_IMAGE_VIEW_TYPE_CUBE,
    RGX_HWPERF_VULKAN_IMAGE_VIEW_TYPE_1D_ARRAY,
    RGX_HWPERF_VULKAN_IMAGE_VIEW_TYPE_2D_ARRAY,
    RGX_HWPERF_VULKAN_IMAGE_VIEW_TYPE_CUBE_ARRAY,

	RGX_HWPERF_VULKAN_IMAGE_VIEW_TYPE_LAST
} RGX_HWPERF_VULKAN_IMAGE_VIEW_TYPE;

typedef enum
{
	RGX_HWPERF_VULKAN_IMAGE_TYPE_INVALID = 0,
	RGX_HWPERF_VULKAN_IMAGE_TYPE_1D,
	RGX_HWPERF_VULKAN_IMAGE_TYPE_2D,
	RGX_HWPERF_VULKAN_IMAGE_TYPE_3D,

	RGX_HWPERF_VULKAN_IMAGE_TYPE_LAST
} RGX_HWPERF_VULKAN_IMAGE_TYPE;

typedef enum
{
	RGX_HWPERF_VULKAN_IMAGE_TILING_INVALID = 0,
	RGX_HWPERF_VULKAN_IMAGE_TILING_OPTIMAL,
	RGX_HWPERF_VULKAN_IMAGE_TILING_LINEAR,
	RGX_HWPERF_VULKAN_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT,

	RGX_HWPERF_VULKAN_IMAGE_TILING_LAST
} RGX_HWPERF_VULKAN_IMAGE_TILING;

typedef enum
{
	RGX_HWPERF_VULKAN_IMAGE_USAGE_INVALID						= 0,
	RGX_HWPERF_VULKAN_IMAGE_USAGE_TRANSFER_SRC_BIT 				= 0x00000001,
    RGX_HWPERF_VULKAN_IMAGE_USAGE_TRANSFER_DST_BIT 				= 0x00000002,
    RGX_HWPERF_VULKAN_IMAGE_USAGE_SAMPLED_BIT 					= 0x00000004,
    RGX_HWPERF_VULKAN_IMAGE_USAGE_STORAGE_BIT 					= 0x00000008,
    RGX_HWPERF_VULKAN_IMAGE_USAGE_COLOR_ATTACHMENT_BIT 			= 0x00000010,
    RGX_HWPERF_VULKAN_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT 	= 0x00000020,
    RGX_HWPERF_VULKAN_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT 		= 0x00000040,
    RGX_HWPERF_VULKAN_IMAGE_USAGE_INPUT_ATTACHMENT_BIT 			= 0x00000080,
    RGX_HWPERF_VULKAN_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV 	= 0x00000100,
    RGX_HWPERF_VULKAN_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT 	= 0x00000200,
} RGX_HWPERF_VULKAN_IMAGE_USAGE;

typedef enum
{
	RGX_HWPERF_VULKAN_FILTER_INVALID = 0,
	RGX_HWPERF_VULKAN_FILTER_NEAREST,
	RGX_HWPERF_VULKAN_FILTER_LINEAR,
	RGX_HWPERF_VULKAN_FILTER_CUBIC_IMG,

	RGX_HWPERF_VULKAN_FILTER_LAST
} RGX_HWPERF_VULKAN_FILTER;

typedef enum
{
	RGX_HWPERF_VULKAN_SAMPLER_MIPMAP_MODE_INVALID = 0,
	RGX_HWPERF_VULKAN_SAMPLER_MIPMAP_MODE_NEAREST,
	RGX_HWPERF_VULKAN_SAMPLER_MIPMAP_MODE_LINEAR,

	RGX_HWPERF_VULKAN_SAMPLER_MIPMAP_MODE_LAST
} RGX_HWPERF_VULKAN_SAMPLER_MIPMAP_MODE;

typedef enum
{
	RGX_HWPERF_VULKAN_SAMPLER_ADDRESS_MODE_INVALID = 0,
	RGX_HWPERF_VULKAN_SAMPLER_ADDRESS_MODE_REPEAT,
	RGX_HWPERF_VULKAN_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT,
	RGX_HWPERF_VULKAN_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE,
	RGX_HWPERF_VULKAN_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER,
	RGX_HWPERF_VULKAN_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE,

	RGX_HWPERF_VULKAN_SAMPLER_ADDRESS_MODE_LAST
} RGX_HWPERF_VULKAN_SAMPLER_ADDRESS_MODE;

typedef enum
{
	RGX_HWPERF_VULKAN_DESCRIPTOR_TYPE_INVALID = 0,
	RGX_HWPERF_VULKAN_DESCRIPTOR_TYPE_SAMPLER,
	RGX_HWPERF_VULKAN_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER,
	RGX_HWPERF_VULKAN_DESCRIPTOR_TYPE_SAMPLED_IMAGE,
	RGX_HWPERF_VULKAN_DESCRIPTOR_TYPE_STORAGE_IMAGE,
	RGX_HWPERF_VULKAN_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER,
	RGX_HWPERF_VULKAN_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER,
	RGX_HWPERF_VULKAN_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
	RGX_HWPERF_VULKAN_DESCRIPTOR_TYPE_STORAGE_BUFFER,
	RGX_HWPERF_VULKAN_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC,
	RGX_HWPERF_VULKAN_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC,
	RGX_HWPERF_VULKAN_DESCRIPTOR_TYPE_INPUT_ATTACHMENT,
	RGX_HWPERF_VULKAN_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT,
	RGX_HWPERF_VULKAN_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV,

	RGX_HWPERF_VULKAN_DESCRIPTOR_TYPE_LAST
} RGX_HWPERF_VULKAN_DESCRIPTOR_TYPE;

typedef enum
{
	RGX_HWPERF_VULKAN_SHADER_STAGE_INVALID						= 0,
	RGX_HWPERF_VULKAN_SHADER_STAGE_VERTEX_BIT 					= 0x00000001,
    RGX_HWPERF_VULKAN_SHADER_STAGE_TESSELLATION_CONTROL_BIT 	= 0x00000002,
    RGX_HWPERF_VULKAN_SHADER_STAGE_TESSELLATION_EVALUATION_BIT 	= 0x00000004,
    RGX_HWPERF_VULKAN_SHADER_STAGE_GEOMETRY_BIT 				= 0x00000008,
    RGX_HWPERF_VULKAN_SHADER_STAGE_FRAGMENT_BIT 				= 0x00000010,
	RGX_HWPERF_VULKAN_SHADER_STAGE_ALL_GRAPHICS 				= 0x0000001F,
    RGX_HWPERF_VULKAN_SHADER_STAGE_COMPUTE_BIT 					= 0x00000020,
    RGX_HWPERF_VULKAN_SHADER_STAGE_RAYGEN_BIT_NV 				= 0x00000100,
    RGX_HWPERF_VULKAN_SHADER_STAGE_ANY_HIT_BIT_NV 				= 0x00000200,
    RGX_HWPERF_VULKAN_SHADER_STAGE_CLOSEST_HIT_BIT_NV 			= 0x00000400,
    RGX_HWPERF_VULKAN_SHADER_STAGE_MISS_BIT_NV 					= 0x00000800,
    RGX_HWPERF_VULKAN_SHADER_STAGE_INTERSECTION_BIT_NV 			= 0x00001000,
    RGX_HWPERF_VULKAN_SHADER_STAGE_CALLABLE_BIT_NV 				= 0x00002000,
    RGX_HWPERF_VULKAN_SHADER_STAGE_TASK_BIT_NV 					= 0x00000040,
    RGX_HWPERF_VULKAN_SHADER_STAGE_MESH_BIT_NV 					= 0x00000080,
    RGX_HWPERF_VULKAN_SHADER_STAGE_ALL 							= 0x7FFFFFFF,
} RGX_HWPERF_VULKAN_SHADER_STAGE;

typedef enum
{
	RGX_HWPERF_VULKAN_BUFFER_USAGE_INVALID 										= 0,
	RGX_HWPERF_VULKAN_BUFFER_USAGE_TRANSFER_SRC_BIT 							= 0x00000001,
    RGX_HWPERF_VULKAN_BUFFER_USAGE_TRANSFER_DST_BIT 							= 0x00000002,
    RGX_HWPERF_VULKAN_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT 					= 0x00000004,
    RGX_HWPERF_VULKAN_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT 					= 0x00000008,
    RGX_HWPERF_VULKAN_BUFFER_USAGE_UNIFORM_BUFFER_BIT 							= 0x00000010,
    RGX_HWPERF_VULKAN_BUFFER_USAGE_STORAGE_BUFFER_BIT 							= 0x00000020,
    RGX_HWPERF_VULKAN_BUFFER_USAGE_INDEX_BUFFER_BIT 							= 0x00000040,
    RGX_HWPERF_VULKAN_BUFFER_USAGE_VERTEX_BUFFER_BIT 							= 0x00000080,
    RGX_HWPERF_VULKAN_BUFFER_USAGE_INDIRECT_BUFFER_BIT 							= 0x00000100,
    RGX_HWPERF_VULKAN_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT 			= 0x00000800,
    RGX_HWPERF_VULKAN_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT 	= 0x00001000,
    RGX_HWPERF_VULKAN_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT 				= 0x00000200,
    RGX_HWPERF_VULKAN_BUFFER_USAGE_RAY_TRACING_BIT_NV 							= 0x00000400,
    RGX_HWPERF_VULKAN_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT 				= 0x00020000,
} RGX_HWPERF_VULKAN_BUFFER_USAGE;

typedef struct
{
	RGX_HWPERF_VULKAN_STENCIL_OP eFailOp;
    RGX_HWPERF_VULKAN_STENCIL_OP ePassOp;
    RGX_HWPERF_VULKAN_STENCIL_OP eDepthFailOp;
    RGX_HWPERF_VULKAN_COMPARE_OP eCompareOp;
} RGX_HWPERF_VULKAN_STENCIL_OP_STATE;

typedef struct
{
	IMG_BOOL						bEnabled;
    RGX_HWPERF_VULKAN_BLEND_FACTOR  eSrcColourBlendFactor;
    RGX_HWPERF_VULKAN_BLEND_FACTOR 	eDstColourBlendFactor;
    RGX_HWPERF_VULKAN_BLEND_OP  	eColourBlendOp;
    RGX_HWPERF_VULKAN_BLEND_FACTOR  eSrcAlphaBlendFactor;
    RGX_HWPERF_VULKAN_BLEND_FACTOR  eDstAlphaBlendFactor;
    RGX_HWPERF_VULKAN_BLEND_OP  	eAlphaBlendOp;
} RGX_HWPERF_VULKAN_COLOUR_ATTACHMENT_BLEND_STATE;

typedef struct
{
	IMG_PIXFMT                				ePixFormat;
    RGX_HWPERF_VULKAN_SAMPLE_COUNT			eSamples;
    RGX_HWPERF_VULKAN_ATTACHMENT_LOAD_OP	eLoadOp;
    RGX_HWPERF_VULKAN_ATTACHMENT_STORE_OP	eStoreOp;
    RGX_HWPERF_VULKAN_ATTACHMENT_LOAD_OP	eStencilLoadOp;
    RGX_HWPERF_VULKAN_ATTACHMENT_STORE_OP	eStencilStoreOp;
    RGX_HWPERF_VULKAN_IMAGE_LAYOUT			eInitialLayout;
    RGX_HWPERF_VULKAN_IMAGE_LAYOUT			eFinalLayout;
} RGX_HWPERF_VULKAN_ATTACHMENT_DESCRIPTION;

typedef struct
{
	IMG_UINT32 								ui32Attachment;
	RGX_HWPERF_VULKAN_IMAGE_LAYOUT 			eImageLayout;
	RGX_HWPERF_VULKAN_ATTACHMENT_REF_TYPE	eType;
} RGX_HWPERF_VULKAN_ATTACHMENT_REF;

/*
	ui8AttachmentRefs is a variable length array which contains:
	ui32AttachmentRefCount * RGX_HWPERF_VULKAN_ATTACHMENT_REF structs.

	Use RGX_HWPERF_VULKAN_SUBPASS_DESCRIPTION_SIZE to calculate the size of this struct.
	Use RGX_HWPERF_VULKAN_SUBPASS_DESCRIPTION_ATTACH_REF_HANDLE to index ui8AttachmentRefs.
*/
typedef struct
{
	RGX_HWPERF_VULKAN_PIPELINE_BIND_POINT 	eBindPoint;
	IMG_UINT32								ui32AttachmentRefCount;
	IMG_BYTE								ui8AttachmentRefs[1];
} RGX_HWPERF_VULKAN_SUBPASS_DESCRIPTION;

#define RGX_HWPERF_VULKAN_SUBPASS_DESCRIPTION_SIZE(ui32AttachmentRefCount) \
	offsetof(RGX_HWPERF_VULKAN_SUBPASS_DESCRIPTION, ui8AttachmentRefs) + sizeof(RGX_HWPERF_VULKAN_ATTACHMENT_REF) * ui32AttachmentRefCount

#define RGX_HWPERF_VULKAN_SUBPASS_DESCRIPTION_ATTACH_REF_HANDLE(index, psSubpassDesc) \
	(RGX_HWPERF_VULKAN_ATTACHMENT_REF*)IMG_OFFSET_ADDR(psSubpassDesc->ui8AttachmentRefs, index * sizeof(RGX_HWPERF_VULKAN_ATTACHMENT_REF));

typedef struct
{
	IMG_UINT32	ui32SrcSubpass;
	IMG_UINT32	ui32DstSubpass;
	IMG_UINT32	ui32SrcStageMask;
	IMG_UINT32	ui32DstStageMask;
	IMG_UINT32	ui32SrcAccessMask;
	IMG_UINT32	ui32DstAccessMask;
} RGX_HWPERF_VULKAN_SUBPASS_DEPENDENCY;

typedef struct
{
	IMG_UINT32 						ui32ObjectID;
	RGX_HWPERF_VULKAN_OBJECT_TYPE 	eObjectType;
} RGX_HWPERF_VULKAN_ATTACHED_OBJECT;

typedef struct
{
	RGX_HWPERF_VULKAN_SHADER_STAGE eShaderStage;
	RGX_HWPERF_VULKAN_ATTACHED_OBJECT sAttachedObject;
} RGX_HWPERF_VULKAN_PIPELINE_SHADER_STAGE;

/*
	ui8VariableData is a variable length array which contains:
	ui32AttachmentCount * RGX_HWPERF_VULKAN_COLOUR_ATTACHMENT_BLEND_STATE structs
	+ ui32AttachedObjectCount * RGX_HWPERF_VULKAN_ATTACHED_OBJECT structs
	+ ui32ShaderStageCount * RGX_HWPERF_VULKAN_PIPELINE_SHADER_STAGE structs.

	Use RGX_HWPERF_VULKAN_GRAPHICS_PIPELINE_COLOUR_ATTACHMENT_BLEND_STATE_HANDLE,
	RGX_HWPERF_VULKAN_GRAPHICS_PIPELINE_ATTACHED_OBJECT_HANDLE
	and RGX_HWPERF_VULKAN_GRAPHICS_PIPELINE_SHADER_STAGE_HANDLE to index ui8VariableData.
*/
typedef struct
{
	IMG_UINT32 								ui32Flags; 	// See HWPERF_VULKAN_GP_FLAGS_*
	RGX_HWPERF_VULKAN_CULL_MODE 			eCullMode;
	RGX_HWPERF_VULKAN_FRONT_FACE 			eFrontFace;
	RGX_HWPERF_VULKAN_PRIMITIVE_TOPOLOGY 	ePrimitiveTopology;
	RGX_HWPERF_VULKAN_SAMPLE_COUNT 			eRasterSamples;
	RGX_HWPERF_VULKAN_COMPARE_OP 			eDepthCompareOp;
	RGX_HWPERF_VULKAN_LOGIC_OP 				eBlendLogicOp;
	RGX_HWPERF_VULKAN_STENCIL_OP_STATE 		sStencilState[HWPERF_VULKAN_STENCIL_OP_COUNT];
	IMG_UINT32								ui32AttachmentCount;
	IMG_UINT32								ui32AttachedObjectCount;
	IMG_UINT32								ui32ShaderStageCount;
	IMG_BYTE								ui8VariableData[1]; // Variable length array
} RGX_HWPERF_VULKAN_GRAPHICS_PIPELINE;

#define RGX_HWPERF_VULKAN_GRAPHICS_PIPELINE_COLOUR_ATTACHMENT_BLEND_STATE_HANDLE(ui32Index, psGraphicsPipeline) \
	((RGX_HWPERF_VULKAN_COLOUR_ATTACHMENT_BLEND_STATE*)IMG_OFFSET_ADDR(psGraphicsPipeline->ui8VariableData, (ui32Index * sizeof(RGX_HWPERF_VULKAN_COLOUR_ATTACHMENT_BLEND_STATE))))
#define RGX_HWPERF_VULKAN_GRAPHICS_PIPELINE_ATTACHED_OBJECT_HANDLE(ui32Index, psGraphicsPipeline) \
	((RGX_HWPERF_VULKAN_ATTACHED_OBJECT*)IMG_OFFSET_ADDR(RGX_HWPERF_VULKAN_GRAPHICS_PIPELINE_COLOUR_ATTACHMENT_BLEND_STATE_HANDLE(psGraphicsPipeline->ui32AttachmentCount, psGraphicsPipeline), ui32Index * sizeof(RGX_HWPERF_VULKAN_ATTACHED_OBJECT)))
#define RGX_HWPERF_VULKAN_GRAPHICS_PIPELINE_SHADER_STAGE_HANDLE(ui32Index, psGraphicsPipeline) \
	((RGX_HWPERF_VULKAN_PIPELINE_SHADER_STAGE*)IMG_OFFSET_ADDR((RGX_HWPERF_VULKAN_GRAPHICS_PIPELINE_ATTACHED_OBJECT_HANDLE(psGraphicsPipeline->ui32AttachedObjectCount, psGraphicsPipeline)), ui32Index * sizeof(RGX_HWPERF_VULKAN_PIPELINE_SHADER_STAGE)))
#define RGX_HWPERF_VULKAN_GRAPHICS_PIPELINE_SIZE(psGraphicsPipeline) \
	(offsetof(RGX_HWPERF_VULKAN_GRAPHICS_PIPELINE, ui8VariableData) + psGraphicsPipelineData->ui32AttachmentCount * sizeof(RGX_HWPERF_VULKAN_COLOUR_ATTACHMENT_BLEND_STATE) + psGraphicsPipelineData->ui32AttachedObjectCount * sizeof(RGX_HWPERF_VULKAN_ATTACHED_OBJECT) + psGraphicsPipelineData->ui32ShaderStageCount * sizeof(RGX_HWPERF_VULKAN_PIPELINE_SHADER_STAGE))

#define RGX_HWPERF_VULKAN_COMPUTE_PIPELINE_ATTACHED_OBJ_COUNT 2

typedef struct
{
	RGX_HWPERF_VULKAN_ATTACHED_OBJECT asAttachedObjects[RGX_HWPERF_VULKAN_COMPUTE_PIPELINE_ATTACHED_OBJ_COUNT];
} RGX_HWPERF_VULKAN_COMPUTE_PIPELINE;

typedef struct
{
	IMG_UINT32							ui32AttachedObjectCount;
	RGX_HWPERF_VULKAN_ATTACHED_OBJECT 	sAttachedObjects[1]; // Variable length array
} RGX_HWPERF_VULKAN_PIPELINE_LAYOUT;

/*
	ui8VariableData is a variable length array which contains:
	ui32AttachmentCount * RGX_HWPERF_VULKAN_ATTACHMENT_DESCRIPTION structs
	+ ui32SubpassCount * RGX_HWPERF_VULKAN_SUBPASS_DESCRIPTION structs
	+ ui32DependencyCount * RGX_HWPERF_VULKAN_SUBPASS_DEPENDENCY structs.

	Use RGX_HWPERF_VULKAN_RENDER_PASS_ATTACHMENT_DESCRIPTION_HANDLE,
	RGX_HWPERF_VULKAN_RENDER_PASS_SUBPASS_DESCRIPTION_HANDLE and
	RGX_HWPERF_VULKAN_RENDER_PASS_SUBPASS_DEPENDENCY_HANDLE to index ui8VariableData.
*/
typedef struct
{
	IMG_UINT32	ui32AttachmentCount;
	IMG_UINT32	ui32SubpassCount;
	IMG_UINT32	ui32DependencyCount;
	IMG_BYTE	ui8VariableData[1]; // Variable length array
} RGX_HWPERF_VULKAN_RENDER_PASS;

#define RGX_HWPERF_VULKAN_RENDER_PASS_ATTACHMENT_DESCRIPTION_HANDLE(ui32Index, psRenderPass) \
		(RGX_HWPERF_VULKAN_ATTACHMENT_DESCRIPTION*)IMG_OFFSET_ADDR((psRenderPass->ui8VariableData), ui32Index * sizeof(RGX_HWPERF_VULKAN_ATTACHMENT_DESCRIPTION))

#define RGX_HWPERF_VULKAN_RENDER_PASS_SUBPASS_DESCRIPTION_HANDLE(ui32Index, psRenderPass, ppsDesc) \
	do \
	{ \
		IMG_PBYTE pbDescriptionStart = (IMG_PBYTE)((void *)RGX_HWPERF_VULKAN_RENDER_PASS_ATTACHMENT_DESCRIPTION_HANDLE(psRenderPass->ui32AttachmentCount, psRenderPass)); \
		for (IMG_UINT32 i = 0; i < ui32Index; ++i) \
		{ \
			pbDescriptionStart += RGX_HWPERF_VULKAN_SUBPASS_DESCRIPTION_SIZE(((RGX_HWPERF_VULKAN_SUBPASS_DESCRIPTION*)((void *)pbDescriptionStart))->ui32AttachmentRefCount); \
		} \
		*ppsDesc = (RGX_HWPERF_VULKAN_SUBPASS_DESCRIPTION*)((void *)pbDescriptionStart); \
	} while(false)

#define RGX_HWPERF_VULKAN_RENDER_PASS_SUBPASS_DEPENDENCY_HANDLE(ui32Index, psRenderPass, ppsDependency) \
	do \
	{ \
		IMG_PBYTE pbDependencyStart; \
		RGX_HWPERF_VULKAN_RENDER_PASS_SUBPASS_DESCRIPTION_HANDLE(psRenderPass->ui32SubpassCount, psRenderPass, (RGX_HWPERF_VULKAN_SUBPASS_DESCRIPTION**)&pbDependencyStart); \
		*ppsDependency = (RGX_HWPERF_VULKAN_SUBPASS_DEPENDENCY*)IMG_OFFSET_ADDR((pbDependencyStart), ui32Index * sizeof(RGX_HWPERF_VULKAN_SUBPASS_DEPENDENCY)); \
	} while(false)

typedef struct
{
	IMG_UINT32							ui32Width;
	IMG_UINT32							ui32Height;
	IMG_UINT32							ui32Layers;
	IMG_UINT32 							ui32AttachedObjectCount;
	RGX_HWPERF_VULKAN_ATTACHED_OBJECT 	sAttachedObjects[1]; // Variable length array
} RGX_HWPERF_VULKAN_FRAMEBUFFER;

typedef struct
{
	RGX_HWPERF_VULKAN_IMAGE_VIEW_TYPE 	eViewType;
	IMG_PIXFMT 							ePixFormat;
	IMG_UINT32 							ui32AttachedObjectCount;
	RGX_HWPERF_VULKAN_ATTACHED_OBJECT 	sAttachedObjects[1]; // Variable length array
} RGX_HWPERF_VULKAN_IMAGE_VIEW;

typedef struct
{
	IMG_UINT32							ui32Width;
	IMG_UINT32							ui32Height;
	IMG_UINT32							ui32Depth;
	IMG_UINT32							ui32MipLevels;
	IMG_UINT32							ui32ArrayLayers;
	IMG_UINT32							ui32Usage;
	IMG_PIXFMT 							ePixFormat;
	RGX_HWPERF_VULKAN_IMAGE_TYPE		eImageType;
	RGX_HWPERF_VULKAN_SAMPLE_COUNT		eSamples;
	RGX_HWPERF_VULKAN_IMAGE_TILING		eTiling;
	RGX_HWPERF_VULKAN_IMAGE_LAYOUT		eInitialLayout;
	RGX_HWPERF_VULKAN_FBC_COMPRESSION 	eFBCType; //RDI 17504 - Add FBC to HWPerf Client Data
} RGX_HWPERF_VULKAN_IMAGE;

typedef struct
{
	RGX_HWPERF_VULKAN_FILTER 				eMagFilter;
	RGX_HWPERF_VULKAN_FILTER 				eMinFilter;
	RGX_HWPERF_VULKAN_SAMPLER_MIPMAP_MODE	eMipmapMode;
	RGX_HWPERF_VULKAN_SAMPLER_ADDRESS_MODE	eAddressModeU;
	RGX_HWPERF_VULKAN_SAMPLER_ADDRESS_MODE	eAddressModeV;
	RGX_HWPERF_VULKAN_SAMPLER_ADDRESS_MODE	eAddressModeW;
	RGX_HWPERF_VULKAN_COMPARE_OP			eCompareOp;
	IMG_UINT32								ui32Flags;
} RGX_HWPERF_VULKAN_SAMPLER;

typedef struct
{
	IMG_UINT32 ui32Binding;
	IMG_UINT32 ui32DescriptorCount;
	IMG_UINT32 ui32ShaderStageFlags;
	RGX_HWPERF_VULKAN_DESCRIPTOR_TYPE eType;
} RGX_HWPERF_VULKAN_DESCRIPTOR_SET_LAYOUT_BINDING;

/*
	ui8VariableData is a variable length array which contains:
	ui32BindingCount * RGX_HWPERF_VULKAN_DESCRIPTOR_SET_LAYOUT_BINDING structs

	Use RGX_HWPERF_VULKAN_DESCRIPTOR_SET_LAYOUT_BINDING_HANDLE to
	index ui8VariableData.
*/
typedef struct
{
	IMG_UINT32	ui32BindingCount;
	IMG_BYTE	ui8VariableData[1]; // Variable length array
} RGX_HWPERF_VULKAN_DESCRIPTOR_SET_LAYOUT;

#define RGX_HWPERF_VULKAN_DESCRIPTOR_SET_LAYOUT_BINDING_HANDLE(ui32Index, psDescriptorSetLayout) \
	(RGX_HWPERF_VULKAN_DESCRIPTOR_SET_LAYOUT_BINDING*)(psDescriptorSetLayout->ui8VariableData + ui32Index * sizeof(RGX_HWPERF_VULKAN_DESCRIPTOR_SET_LAYOUT_BINDING))

typedef struct
{
	RGX_HWPERF_VULKAN_ATTACHED_OBJECT 	sAttachedObject;
} RGX_HWPERF_VULKAN_DESCRIPTOR_SET;

#define RGX_HWPERF_VULKAN_DESCRIPTOR_SET_UPDATE_IMAGE_INFO_ATTACHED_OBJ_COUNT 2

typedef struct
{
	RGX_HWPERF_VULKAN_IMAGE_LAYOUT 		eImageLayout;
	RGX_HWPERF_VULKAN_ATTACHED_OBJECT 	sAttachedObjects[RGX_HWPERF_VULKAN_DESCRIPTOR_SET_UPDATE_IMAGE_INFO_ATTACHED_OBJ_COUNT];
} RGX_HWPERF_VULKAN_DESCRIPTOR_SET_UPDATE_IMAGE_INFO;

/*
	ui8VariableData is a variable length array which contains:
	RGX_HWPERF_VULKAN_DESCRIPTOR_SET_UPDATE_IMAGE_INFO OR
	RGX_HWPERF_VULKAN_ATTACHED_OBJECT * ui32DescriptorCount structs
	depending on eType

	Use RGX_HWPERF_VULKAN_WRITE_DESCRIPTOR_SET_IMAGE_INFO_HANDLE
	OR RGX_HWPERF_VULKAN_WRITE_DESCRIPTOR_SET_BUFFER_INFO_HANDLE
	OR RGX_HWPERF_VULKAN_WRITE_DESCRIPTOR_SET_BUFFER_VIEW_INFO_HANDLE
	to index ui8VariableData - see RGX_HWPERF_VULKAN_DESCRIPTOR_SET_WRITE_INFO_SIZE
*/
typedef struct
{
	RGX_HWPERF_VULKAN_DESCRIPTOR_TYPE 	eType;
	IMG_UINT32 							ui32DstSetObjectID;
	IMG_UINT32							ui32DescriptorCount;
	IMG_BYTE							ui8VariableData[1]; // Variable length array
} RGX_HWPERF_VULKAN_WRITE_DESCRIPTOR_SET;

#define RGX_HWPERF_VULKAN_DESCRIPTOR_SET_WRITE_INFO_SIZE(psWriteDescriptorSet, pui32Size) \
	switch (psWriteDescriptorSet->eType) \
	{ \
		case RGX_HWPERF_VULKAN_DESCRIPTOR_TYPE_SAMPLER: \
    	case RGX_HWPERF_VULKAN_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER: \
    	case RGX_HWPERF_VULKAN_DESCRIPTOR_TYPE_SAMPLED_IMAGE: \
    	case RGX_HWPERF_VULKAN_DESCRIPTOR_TYPE_STORAGE_IMAGE: \
		case RGX_HWPERF_VULKAN_DESCRIPTOR_TYPE_INPUT_ATTACHMENT: \
			*pui32Size = sizeof(RGX_HWPERF_VULKAN_DESCRIPTOR_SET_UPDATE_IMAGE_INFO); break; \
		case RGX_HWPERF_VULKAN_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER: \
    	case RGX_HWPERF_VULKAN_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER: \
			*pui32Size = sizeof(RGX_HWPERF_VULKAN_ATTACHED_OBJECT); break; \
		case RGX_HWPERF_VULKAN_DESCRIPTOR_TYPE_UNIFORM_BUFFER: \
    	case RGX_HWPERF_VULKAN_DESCRIPTOR_TYPE_STORAGE_BUFFER: \
    	case RGX_HWPERF_VULKAN_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC: \
    	case RGX_HWPERF_VULKAN_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC: \
			*pui32Size = sizeof(RGX_HWPERF_VULKAN_ATTACHED_OBJECT); break; \
		default: assert(IMG_FALSE); *pui32Size = 0; break; \
	}

#define RGX_HWPERF_VULKAN_WRITE_DESCRIPTOR_SET_IMAGE_INFO_HANDLE(ui32Index, psWriteDescriptorSet) \
		((RGX_HWPERF_VULKAN_DESCRIPTOR_SET_UPDATE_IMAGE_INFO*)(psWriteDescriptorSet->ui8VariableData + sizeof(RGX_HWPERF_VULKAN_DESCRIPTOR_SET_UPDATE_IMAGE_INFO) * ui32Index))
#define RGX_HWPERF_VULKAN_WRITE_DESCRIPTOR_SET_BUFFER_INFO_HANDLE(ui32Index, psWriteDescriptorSet) \
		((RGX_HWPERF_VULKAN_ATTACHED_OBJECT*)(psWriteDescriptorSet->ui8VariableData + sizeof(RGX_HWPERF_VULKAN_ATTACHED_OBJECT) * ui32Index))
#define RGX_HWPERF_VULKAN_WRITE_DESCRIPTOR_SET_BUFFER_VIEW_INFO_HANDLE(ui32Index, psWriteDescriptorSet) \
		((RGX_HWPERF_VULKAN_ATTACHED_OBJECT*)(psWriteDescriptorSet->ui8VariableData + sizeof(RGX_HWPERF_VULKAN_ATTACHED_OBJECT) * ui32Index))

#define RGX_HWPERF_VULKAN_WRITE_DESCRIPTOR_SET_SIZE(psWriteDescriptorSet, ui32InfoSize) \
	(offsetof(RGX_HWPERF_VULKAN_WRITE_DESCRIPTOR_SET, ui8VariableData) + (psWriteDescriptorSet->ui32DescriptorCount * (size_t)ui32InfoSize))

/*
	ui8VariableData is a variable length array which contains:
	RGX_HWPERF_VULKAN_WRITE_DESCRIPTOR_SET * ui32WriteCount structs

	Use RGX_HWPERF_VULKAN_DESCRIPTOR_SET_UPDATE_WRITE_HANDLE to
	index ui8VariableData.
*/
typedef struct
{
	IMG_UINT32	ui32WriteCount;
	IMG_BYTE	ui8VariableData[1]; // Variable length array
} RGX_HWPERF_VULKAN_DESCRIPTOR_SET_UPDATE;

#define RGX_HWPERF_VULKAN_DESCRIPTOR_SET_UPDATE_WRITE_HANDLE(ui32Index, psDescriptorSetUpdate, ppsWriteDescriptorSet) \
	do \
	{ \
		IMG_PBYTE pbWriteDescriptorSet = (IMG_PBYTE)((void *)(psDescriptorSetUpdate->ui8VariableData)); \
		for (IMG_UINT32 i = 0; i < ui32Index; ++i) \
		{ \
			IMG_UINT32 ui32InfoStructSize; \
			RGX_HWPERF_VULKAN_DESCRIPTOR_SET_WRITE_INFO_SIZE(((RGX_HWPERF_VULKAN_WRITE_DESCRIPTOR_SET*)((void *)pbWriteDescriptorSet)), &ui32InfoStructSize); \
			pbWriteDescriptorSet += RGX_HWPERF_VULKAN_WRITE_DESCRIPTOR_SET_SIZE(((RGX_HWPERF_VULKAN_WRITE_DESCRIPTOR_SET*)((void *)pbWriteDescriptorSet)), ui32InfoStructSize); \
		} \
		*ppsWriteDescriptorSet = (RGX_HWPERF_VULKAN_WRITE_DESCRIPTOR_SET*)(void *)pbWriteDescriptorSet; \
	} while(false)

/*
	ui8SPIRVCode is a variable size array
	containing SPIR-V binary code.
 */
typedef struct
{
	IMG_UINT32 	ui32PartNumber;
	IMG_UINT32 	ui32CodeLength;
	IMG_BYTE 	ui8SPIRVCode[1]; // Variable length array
} RGX_HWPERF_VULKAN_SHADER_MODULE;

typedef struct
{
	IMG_UINT32 ui32UsageFlags;
	IMG_UINT64 ui64BufferSize;
} RGX_HWPERF_VULKAN_BUFFER;

typedef struct
{
	IMG_UINT32 	ui32CommandBufferCount;
	IMG_BYTE	ui8VariableData[1]; // Variable length array
} RGX_HWPERF_VULKAN_SUBMIT_INFO;

#define RGX_HWPERF_VULKAN_SUBMIT_INFO_SIZE(psSubmitInfo) \
	offsetof(RGX_HWPERF_VULKAN_SUBMIT_INFO, ui8VariableData) + psSubmitInfo->ui32CommandBufferCount * sizeof(RGX_HWPERF_VULKAN_ATTACHED_OBJECT)

#define RGX_HWPERF_VULKAN_SUBMIT_INFO_ATTACHED_COMMAND_BUFFER_HANDLE(ui32Index, psSubmitInfo) \
	(RGX_HWPERF_VULKAN_ATTACHED_OBJECT*)(psSubmitInfo->ui8VariableData + sizeof(RGX_HWPERF_VULKAN_ATTACHED_OBJECT) * ui32Index)

typedef struct
{
	IMG_UINT32 	ui32SubmitCount;
	IMG_BYTE	ui8VariableData[1]; // Variable length array
} RGX_HWPERF_VULKAN_QUEUE_SUBMIT_INFO;

#define RGX_HWPERF_VULKAN_QUEUE_SUBMIT_INFO_HANDLE(ui32Index, psQueueSubmitInfo, ppsSubmitInfo) \
	do \
	{ \
		IMG_PBYTE pbSubmitInfo = (IMG_PBYTE)(psQueueSubmitInfo->ui8VariableData); \
		for (IMG_UINT32 i = 0; i < ui32Index; ++i) \
		{ \
			pbSubmitInfo += RGX_HWPERF_VULKAN_SUBMIT_INFO_SIZE(((RGX_HWPERF_VULKAN_SUBMIT_INFO*)((void *)pbSubmitInfo))); \
		} \
		*ppsSubmitInfo = (RGX_HWPERF_VULKAN_SUBMIT_INFO*)(void *)pbSubmitInfo; \
	} while(false)

#define RGX_HWPERF_VULKAN_RENDER_PASS_BEGIN_INFO_ATTACHED_OBJ_COUNT 2

typedef struct
{
	IMG_UINT32 ui32RenderAreaWidth;
	IMG_UINT32 ui32RenderAreaHeight;
	RGX_HWPERF_VULKAN_ATTACHED_OBJECT sAttachedObjects[RGX_HWPERF_VULKAN_RENDER_PASS_BEGIN_INFO_ATTACHED_OBJ_COUNT];
} RGX_HWPERF_VULKAN_RENDER_PASS_BEGIN;

typedef struct
{
	RGX_HWPERF_VULKAN_ATTACHED_OBJECT sAttachedObject;
} RGX_HWPERF_VULKAN_CMD_BIND_PIPELINE;

typedef struct
{
	IMG_UINT32 	ui32SecondaryBufferCount;
	IMG_BYTE	ui8VariableData[1]; // Variable length array
} RGX_HWPERF_VULKAN_CMD_EXECUTE_SECONDARY_BUFFER_INFO;

#define RGX_HWPERF_VULKAN_CMD_EXECUTE_SECONDARY_BUFFER_INFO_SIZE(psCmdExecuteData) \
	offsetof(RGX_HWPERF_VULKAN_CMD_EXECUTE_SECONDARY_BUFFER_INFO, ui8VariableData) + psCmdExecuteData->ui32SecondaryBufferCount * sizeof(RGX_HWPERF_VULKAN_ATTACHED_OBJECT)

#define RGX_HWPERF_VULKAN_CMD_EXECUTE_SECONDARY_BUFFER_INFO_ATTACHED_OBJECT_HANDLE(ui32Index, psCmdExecuteData) \
	(RGX_HWPERF_VULKAN_ATTACHED_OBJECT*)(psCmdExecuteData->ui8VariableData + sizeof(RGX_HWPERF_VULKAN_ATTACHED_OBJECT) * ui32Index)

typedef struct
{
	IMG_UINT32 								ui32DescriptorSetCount;
	IMG_BYTE								ui8VariableData[1]; // Variable length array
} RGX_HWPERF_VULKAN_CMD_BIND_DESCRIPTOR_SETS;

#define RGX_HWPERF_VULKAN_CMD_BIND_DESCRIPTOR_SETS_SIZE(psCmdBindDescriptorSetsData) \
	offsetof(RGX_HWPERF_VULKAN_CMD_BIND_DESCRIPTOR_SETS, ui8VariableData) + psCmdBindDescriptorSetsData->ui32DescriptorSetCount * sizeof(RGX_HWPERF_VULKAN_ATTACHED_OBJECT)

#define RGX_HWPERF_VULKAN_CMD_BIND_DESCRIPTOR_SETS_ATTACHED_OBJECT_HANDLE(ui32Index, psCmdBindDescriptorSetsData) \
	(RGX_HWPERF_VULKAN_ATTACHED_OBJECT*)(psCmdBindDescriptorSetsData->ui8VariableData + sizeof(RGX_HWPERF_VULKAN_ATTACHED_OBJECT) * ui32Index)

#define RGX_HWPERF_VULKAN_CMD_COPY_ATTACHED_OBJ_COUNT 2

typedef struct
{
	RGX_HWPERF_VULKAN_ATTACHED_OBJECT 	sSourceObject;
	RGX_HWPERF_VULKAN_ATTACHED_OBJECT 	sDestinationObject;
} RGX_HWPERF_VULKAN_CMD_COPY_BUFFER;

typedef struct
{
	RGX_HWPERF_VULKAN_CMD_COPY_BUFFER	sObjects;
	RGX_HWPERF_VULKAN_IMAGE_LAYOUT 		eSourceImageLayout;
	RGX_HWPERF_VULKAN_IMAGE_LAYOUT 		eDestinationImageLayout;
} RGX_HWPERF_VULKAN_CMD_COPY_IMAGE;

typedef struct
{
	RGX_HWPERF_VULKAN_CMD_COPY_IMAGE 	sImageData;
	RGX_HWPERF_VULKAN_FILTER 			eFilter;
} RGX_HWPERF_VULKAN_CMD_BLIT_IMAGE;

typedef struct
{
	RGX_HWPERF_VULKAN_CMD_COPY_BUFFER	sObjects;
	RGX_HWPERF_VULKAN_IMAGE_LAYOUT 		eImageLayout;
} RGX_HWPERF_VULKAN_CMD_COPY_FROM_TO;

typedef struct
{
	uintptr_t uDevice;
	uintptr_t uFramebuffer;
	uintptr_t uRenderPass;
} RGX_HWPERF_VULKAN_START_SUBCOMMAND;

typedef union
{
	RGX_HWPERF_VULKAN_GRAPHICS_PIPELINE 				sGraphicsPipelineData;
	RGX_HWPERF_VULKAN_COMPUTE_PIPELINE					sComputePipelineData;
	RGX_HWPERF_VULKAN_PIPELINE_LAYOUT					sPipelineLayoutData;
	RGX_HWPERF_VULKAN_RENDER_PASS						sRenderPassData;
	RGX_HWPERF_VULKAN_FRAMEBUFFER						sFramebufferData;
	RGX_HWPERF_VULKAN_IMAGE_VIEW						sImageViewData;
	RGX_HWPERF_VULKAN_IMAGE								sImageData;
	RGX_HWPERF_VULKAN_SAMPLER							sSamplerData;
	RGX_HWPERF_VULKAN_DESCRIPTOR_SET_LAYOUT 			sDescriptorSetLayoutData;
	RGX_HWPERF_VULKAN_DESCRIPTOR_SET					sDescriptorSetData;
	RGX_HWPERF_VULKAN_DESCRIPTOR_SET_UPDATE				sDescriptorSetUpdateData;
	RGX_HWPERF_VULKAN_SHADER_MODULE						sShaderModuleData;
	RGX_HWPERF_VULKAN_BUFFER							sBufferData;
	RGX_HWPERF_VULKAN_QUEUE_SUBMIT_INFO					sQueueSubmitInfo;
	RGX_HWPERF_VULKAN_RENDER_PASS_BEGIN					sRenderPassBeginData;
	RGX_HWPERF_VULKAN_CMD_BIND_PIPELINE					sBindPipelineData;
	RGX_HWPERF_VULKAN_CMD_BIND_DESCRIPTOR_SETS			sBindDescriptorSetsData;
	RGX_HWPERF_VULKAN_CMD_EXECUTE_SECONDARY_BUFFER_INFO	sExecuteSecondaryCmdBufferData;
	RGX_HWPERF_VULKAN_CMD_COPY_BUFFER					sCmdCopyBufferData;
	RGX_HWPERF_VULKAN_CMD_COPY_IMAGE					sCmdCopyImageData;
	RGX_HWPERF_VULKAN_CMD_BLIT_IMAGE					sCmdBlitImageData;
	RGX_HWPERF_VULKAN_CMD_COPY_FROM_TO					sCmdCopyFromToData;
	RGX_HWPERF_VULKAN_START_SUBCOMMAND					sStartSubcommand;
} RGX_HWPERF_VULKAN_OBJECT_DATA;

/* MARK_START, MARK_END and MARK_POINT events */
typedef struct
{
	IMG_UINT32 ui32VulkanObjectID;
	IMG_UINT32 ui32ThreadID;
	IMG_UINT32 ui32JobRef;
	IMG_UINT32 ui32VulkanDebugColour;
	RGX_HWPERF_MARK_ID eMarkId;
} RGX_HWPERF_VULKAN_EVENT_DATA;

typedef struct
{
	RGX_HWPERF_VULKAN_EVENT_DATA 	sEventData;
	IMG_CHAR 						acMarkInfo[HWPERF_CLIENT_MAX_MESSAGE_LEN];
	RGX_HWPERF_VULKAN_OBJECT_DATA 	uExtraApiData;
} RGX_HWPERF_VULKAN_MARK_DATA;

/******************************************************************************/
/* OpenCL events                                                              */
/******************************************************************************/

typedef struct
{
	RGX_HWPERF_MARK_ID eMarkId;
	IMG_UINT32 ui32JobRef;
	IMG_UINT32 ui32OpenCLContextID;
	IMG_CHAR acInfo[HWPERF_CLIENT_MAX_MESSAGE_LEN];
} RGX_HWPERF_OPENCL_MARK_DATA;

/******************************************************************************/
/* Common types                                                               */
/******************************************************************************/
typedef struct
{
	// Size of memory operation
	IMG_UINT32 nSize;
	RGX_HWPERF_CLIENT_MEM_RESOURCE_TYPE eMemResourceType;
	RGX_HWPERF_MEM_OP_TYPE eMemOpType;
	/* This char array may be:
		RGX_HWPERF_OGLES_MARK_DATA OR
		RGX_HWPERF_EGL_MARK_DATA OR
		RGX_HWPERF_VULKAN_MARK_DATA OR
		RGX_HWPERF_OPENCL_MARK_DATA
		Depending on the value of eMemResourceType.
	*/
#if defined (INTEGRITY_OS)
	IMG_CHAR acAPISpecificData[1];
#else
	IMG_CHAR acAPISpecificData[];
#endif
} RGX_HWPERF_CLIENT_MEM_OP;

typedef union
{
	/* Services (Srv) */
	RGX_HWPERF_SERVICES_KICK_DATA sSrvKick;
	RGX_HWPERF_SERVICES_CLIENT_ENQ_DATA sSrvEnq;
	RGX_HWPERF_SERVICES_CLIENT_SYNC_ALLOC_DATA sSrvSyncAlloc;
	RGX_HWPERF_SERVICES_CLIENT_SYNC_FREE_DATA sSrvSyncFree;
	RGX_HWPERF_SERVICES_CLIENT_SYNC_FENCE_WAIT_DATA sSrvSyncFenceWait;
	RGX_HWPERF_SERVICES_CLIENT_SYNC_SW_TL_ADVANCE_DATA sSrvSyncSWTLAdv;
	RGX_HWPERF_SERVICES_CLIENT_SWTQ_DATA sSrvSWTQ;
	/* EGL (Egl) */
	RGX_HWPERF_EGL_MARK_DATA sEGLMark;
	/* OpenGLES (Gles) */
	RGX_HWPERF_OGLES_POINT_DATA sGlesPoint;
	RGX_HWPERF_OGLES_MARK_DATA sGlesMark;
	RGX_HWPERF_OGLES_KICK_DATA sGlesKick;
	RGX_HWPERF_OGLES_KICK_DATA_END sGlesKickEnd;
	RGX_HWPERF_OGLES_DRAW_DATA sGlesDrawData;
	RGX_HWPERF_OGLES_SHADER_DATA sGlesShaderData;
	RGX_HWPERF_OGLES_COMPUTE_DATA sGlesComputeData;
	/* OpenCL (Cl) */
	RGX_HWPERF_OPENCL_MARK_DATA sOpenCLMark;
	/* Vulkan (Vk) */
	RGX_HWPERF_VULKAN_MARK_DATA sVulkanMark;

	RGX_HWPERF_CLIENT_MEM_OP sClientMemOp;
} RGX_HWPERF_V2_PACKET_DATA_CLIENT;

#define RGX_HWPERF_CLIENT_GET_PACKET_DATA(_packet) \
    ((RGX_HWPERF_V2_PACKET_DATA_CLIENT * ) (_packet + 1))


#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* RGX_HWPERF_CLIENT_H */
